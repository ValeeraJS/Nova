{"version":3,"file":"Engine.js","sources":["../node_modules/tslib/tslib.es6.js","../node_modules/@valeera/eventdispatcher/build/EventDispatcher.module.js","../node_modules/@valeera/mathx/build/Mathx.module.js","../node_modules/@valeera/idgenerator/build/IdGenerator.module.js"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\r\nconst mixin = (Base = Object, eventKeyList = []) => {\r\n    var _a;\r\n    return _a = class EventDispatcher extends Base {\r\n            constructor() {\r\n                super(...arguments);\r\n                // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility\r\n                this.eventKeyList = eventKeyList;\r\n                /**\r\n                 * store all the filters\r\n                 */\r\n                // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility\r\n                this.filters = [];\r\n                /**\r\n                 * store all the listeners by key\r\n                 */\r\n                // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility\r\n                this.listeners = new Map();\r\n                this.all = (listener) => {\r\n                    return this.filt(() => true, listener);\r\n                };\r\n                this.clearListenersByKey = (eventKey) => {\r\n                    this.listeners.delete(eventKey);\r\n                    return this;\r\n                };\r\n                this.clearAllListeners = () => {\r\n                    const keys = this.listeners.keys();\r\n                    for (const key of keys) {\r\n                        this.listeners.delete(key);\r\n                    }\r\n                    return this;\r\n                };\r\n                this.filt = (rule, listener) => {\r\n                    this.filters.push({\r\n                        listener,\r\n                        rule\r\n                    });\r\n                    return this;\r\n                };\r\n                this.fire = (eventKey, target) => {\r\n                    if (!this.checkEventKeyAvailable(eventKey)) {\r\n                        console.error(\"EventDispatcher couldn't dispatch the event since EventKeyList doesn't contains key: \", eventKey);\r\n                        return this;\r\n                    }\r\n                    const array = this.listeners.get(eventKey) || [];\r\n                    let len = array.length;\r\n                    let item;\r\n                    for (let i = 0; i < len; i++) {\r\n                        item = array[i];\r\n                        item.listener({\r\n                            eventKey,\r\n                            life: --item.times,\r\n                            target\r\n                        });\r\n                        if (item.times <= 0) {\r\n                            array.splice(i--, 1);\r\n                            --len;\r\n                        }\r\n                    }\r\n                    return this.checkFilt(eventKey, target);\r\n                };\r\n                this.off = (eventKey, listener) => {\r\n                    const array = this.listeners.get(eventKey);\r\n                    if (!array) {\r\n                        return this;\r\n                    }\r\n                    const len = array.length;\r\n                    for (let i = 0; i < len; i++) {\r\n                        if (array[i].listener === listener) {\r\n                            array.splice(i, 1);\r\n                            break;\r\n                        }\r\n                    }\r\n                    return this;\r\n                };\r\n                this.on = (eventKey, listener) => {\r\n                    return this.times(eventKey, Infinity, listener);\r\n                };\r\n                this.once = (eventKey, listener) => {\r\n                    return this.times(eventKey, 1, listener);\r\n                };\r\n                this.times = (eventKey, times, listener) => {\r\n                    if (!this.checkEventKeyAvailable(eventKey)) {\r\n                        console.error(\"EventDispatcher couldn't add the listener: \", listener, \"since EventKeyList doesn't contains key: \", eventKey);\r\n                        return this;\r\n                    }\r\n                    const array = this.listeners.get(eventKey) || [];\r\n                    if (!this.listeners.has(eventKey)) {\r\n                        this.listeners.set(eventKey, array);\r\n                    }\r\n                    array.push({\r\n                        listener,\r\n                        times\r\n                    });\r\n                    return this;\r\n                };\r\n                this.checkFilt = (eventKey, target) => {\r\n                    for (const item of this.filters) {\r\n                        if (item.rule(eventKey, target)) {\r\n                            item.listener({\r\n                                eventKey,\r\n                                life: Infinity,\r\n                                target\r\n                            });\r\n                        }\r\n                    }\r\n                    return this;\r\n                };\r\n                this.checkEventKeyAvailable = (eventKey) => {\r\n                    if (this.eventKeyList.length) {\r\n                        return this.eventKeyList.includes(eventKey);\r\n                    }\r\n                    return true;\r\n                };\r\n            }\r\n        },\r\n        _a.mixin = mixin,\r\n        _a;\r\n};\r\nvar EventDispatcher = mixin(Object);\n\nexport default EventDispatcher;\n//# sourceMappingURL=EventDispatcher.module.js.map\n","const COLOR_HEX_MAP = {\r\n    aliceblue: 0xF0F8FF,\r\n    antiquewhite: 0xFAEBD7,\r\n    aqua: 0x00FFFF,\r\n    aquamarine: 0x7FFFD4,\r\n    azure: 0xF0FFFF,\r\n    beige: 0xF5F5DC,\r\n    bisque: 0xFFE4C4,\r\n    black: 0x000000,\r\n    blanchedalmond: 0xFFEBCD,\r\n    blue: 0x0000FF,\r\n    blueviolet: 0x8A2BE2,\r\n    brown: 0xA52A2A,\r\n    burlywood: 0xDEB887,\r\n    cadetblue: 0x5F9EA0,\r\n    chartreuse: 0x7FFF00,\r\n    chocolate: 0xD2691E,\r\n    coral: 0xFF7F50,\r\n    cornflowerblue: 0x6495ED,\r\n    cornsilk: 0xFFF8DC,\r\n    crimson: 0xDC143C,\r\n    cyan: 0x00FFFF,\r\n    darkblue: 0x00008B,\r\n    darkcyan: 0x008B8B,\r\n    darkgoldenrod: 0xB8860B,\r\n    darkgray: 0xA9A9A9,\r\n    darkgreen: 0x006400,\r\n    darkgrey: 0xA9A9A9,\r\n    darkkhaki: 0xBDB76B,\r\n    darkmagenta: 0x8B008B,\r\n    darkolivegreen: 0x556B2F,\r\n    darkorange: 0xFF8C00,\r\n    darkorchid: 0x9932CC,\r\n    darkred: 0x8B0000,\r\n    darksalmon: 0xE9967A,\r\n    darkseagreen: 0x8FBC8F,\r\n    darkslateblue: 0x483D8B,\r\n    darkslategray: 0x2F4F4F,\r\n    darkslategrey: 0x2F4F4F,\r\n    darkturquoise: 0x00CED1,\r\n    darkviolet: 0x9400D3,\r\n    deeppink: 0xFF1493,\r\n    deepskyblue: 0x00BFFF,\r\n    dimgray: 0x696969,\r\n    dimgrey: 0x696969,\r\n    dodgerblue: 0x1E90FF,\r\n    firebrick: 0xB22222,\r\n    floralwhite: 0xFFFAF0,\r\n    forestgreen: 0x228B22,\r\n    fuchsia: 0xFF00FF,\r\n    gainsboro: 0xDCDCDC,\r\n    ghostwhite: 0xF8F8FF,\r\n    gold: 0xFFD700,\r\n    goldenrod: 0xDAA520,\r\n    gray: 0x808080,\r\n    green: 0x008000,\r\n    greenyellow: 0xADFF2F,\r\n    grey: 0x808080,\r\n    honeydew: 0xF0FFF0,\r\n    hotpink: 0xFF69B4,\r\n    indianred: 0xCD5C5C,\r\n    indigo: 0x4B0082,\r\n    ivory: 0xFFFFF0,\r\n    khaki: 0xF0E68C,\r\n    lavender: 0xE6E6FA,\r\n    lavenderblush: 0xFFF0F5,\r\n    lawngreen: 0x7CFC00,\r\n    lemonchiffon: 0xFFFACD,\r\n    lightblue: 0xADD8E6,\r\n    lightcoral: 0xF08080,\r\n    lightcyan: 0xE0FFFF,\r\n    lightgoldenrodyellow: 0xFAFAD2,\r\n    lightgray: 0xD3D3D3,\r\n    lightgreen: 0x90EE90,\r\n    lightgrey: 0xD3D3D3,\r\n    lightpink: 0xFFB6C1,\r\n    lightsalmon: 0xFFA07A,\r\n    lightseagreen: 0x20B2AA,\r\n    lightskyblue: 0x87CEFA,\r\n    lightslategray: 0x778899,\r\n    lightslategrey: 0x778899,\r\n    lightsteelblue: 0xB0C4DE,\r\n    lightyellow: 0xFFFFE0,\r\n    lime: 0x00FF00,\r\n    limegreen: 0x32CD32,\r\n    linen: 0xFAF0E6,\r\n    magenta: 0xFF00FF,\r\n    maroon: 0x800000,\r\n    mediumaquamarine: 0x66CDAA,\r\n    mediumblue: 0x0000CD,\r\n    mediumorchid: 0xBA55D3,\r\n    mediumpurple: 0x9370DB,\r\n    mediumseagreen: 0x3CB371,\r\n    mediumslateblue: 0x7B68EE,\r\n    mediumspringgreen: 0x00FA9A,\r\n    mediumturquoise: 0x48D1CC,\r\n    mediumvioletred: 0xC71585,\r\n    midnightblue: 0x191970,\r\n    mintcream: 0xF5FFFA,\r\n    mistyrose: 0xFFE4E1,\r\n    moccasin: 0xFFE4B5,\r\n    navajowhite: 0xFFDEAD,\r\n    navy: 0x000080,\r\n    oldlace: 0xFDF5E6,\r\n    olive: 0x808000,\r\n    olivedrab: 0x6B8E23,\r\n    orange: 0xFFA500,\r\n    orangered: 0xFF4500,\r\n    orchid: 0xDA70D6,\r\n    palegoldenrod: 0xEEE8AA,\r\n    palegreen: 0x98FB98,\r\n    paleturquoise: 0xAFEEEE,\r\n    palevioletred: 0xDB7093,\r\n    papayawhip: 0xFFEFD5,\r\n    peachpuff: 0xFFDAB9,\r\n    peru: 0xCD853F,\r\n    pink: 0xFFC0CB,\r\n    plum: 0xDDA0DD,\r\n    powderblue: 0xB0E0E6,\r\n    purple: 0x800080,\r\n    rebeccapurple: 0x663399,\r\n    red: 0xFF0000,\r\n    rosybrown: 0xBC8F8F,\r\n    royalblue: 0x4169E1,\r\n    saddlebrown: 0x8B4513,\r\n    salmon: 0xFA8072,\r\n    sandybrown: 0xF4A460,\r\n    seagreen: 0x2E8B57,\r\n    seashell: 0xFFF5EE,\r\n    sienna: 0xA0522D,\r\n    silver: 0xC0C0C0,\r\n    skyblue: 0x87CEEB,\r\n    slateblue: 0x6A5ACD,\r\n    slategray: 0x708090,\r\n    slategrey: 0x708090,\r\n    snow: 0xFFFAFA,\r\n    springgreen: 0x00FF7F,\r\n    steelblue: 0x4682B4,\r\n    tan: 0xD2B48C,\r\n    teal: 0x008080,\r\n    thistle: 0xD8BFD8,\r\n    tomato: 0xFF6347,\r\n    turquoise: 0x40E0D0,\r\n    violet: 0xEE82EE,\r\n    wheat: 0xF5DEB3,\r\n    white: 0xFFFFFF,\r\n    whitesmoke: 0xF5F5F5,\r\n    yellow: 0xFFFF00,\r\n    yellowgreen: 0x9ACD32\r\n};\n\nclass ColorRGBA extends Uint8Array {\r\n    constructor(r = 0, g = 0, b = 0, a = 255) {\r\n        super(4);\r\n        this[0] = r;\r\n        this[1] = g;\r\n        this[2] = b;\r\n        this[3] = a;\r\n    }\r\n    get r() {\r\n        return this[0];\r\n    }\r\n    set r(val) {\r\n        this[0] = val;\r\n    }\r\n    get g() {\r\n        return this[1];\r\n    }\r\n    set g(val) {\r\n        this[1] = val;\r\n    }\r\n    get b() {\r\n        return this[2];\r\n    }\r\n    set b(val) {\r\n        this[2] = val;\r\n    }\r\n    get a() {\r\n        return this[3];\r\n    }\r\n    set a(val) {\r\n        this[3] = val;\r\n    }\r\n}\n\nclass ColorRGB extends Uint8Array {\r\n    constructor(r = 0, g = 0, b = 0) {\r\n        super(3);\r\n        this[0] = r;\r\n        this[1] = g;\r\n        this[2] = b;\r\n    }\r\n    get r() {\r\n        return this[0];\r\n    }\r\n    set r(val) {\r\n        this[0] = val;\r\n    }\r\n    get g() {\r\n        return this[1];\r\n    }\r\n    set g(val) {\r\n        this[1] = val;\r\n    }\r\n    get b() {\r\n        return this[2];\r\n    }\r\n    set b(val) {\r\n        this[2] = val;\r\n    }\r\n}\n\nconst create = (r = 0, g = 0, b = 0, a = 1, out = new Float32Array(4)) => {\r\n    out[0] = r;\r\n    out[1] = g;\r\n    out[2] = b;\r\n    out[3] = a;\r\n    return out;\r\n};\r\nconst createJson = (r = 0, g = 0, b = 0, a = 1) => {\r\n    return {\r\n        r,\r\n        g,\r\n        b,\r\n        a\r\n    };\r\n};\r\nconst fromScalar = (scalar, a = 1, out) => {\r\n    out[0] = scalar;\r\n    out[1] = scalar;\r\n    out[2] = scalar;\r\n    out[3] = a;\r\n    return out;\r\n};\n\nvar ColorGPU = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tcreate: create,\n\tcreateJson: createJson,\n\tfromScalar: fromScalar\n});\n\nvar ceilPowerOfTwo = (value) => {\r\n    return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));\r\n};\n\n/**\r\n * @function clamp\r\n * @desc 将目标值限定在指定区间内。假定min小于等于max才能得到正确的结果。\r\n * @see clampSafe\r\n * @param {number} val 目标值\r\n * @param {number} min 最小值，必须小于等于max\r\n * @param {number} max 最大值，必须大于等于min\r\n * @returns {number} 限制之后的值\r\n * @example Mathx.clamp(1, 0, 2); // 1;\r\n * Mathx.clamp(-1, 0, 2); // 0;\r\n * Mathx.clamp(3, 0, 2); // 2;\r\n */\r\nvar clampCommon = (val, min, max) => {\r\n    return Math.max(min, Math.min(max, val));\r\n};\n\n/**\r\n * @function floorToZero\r\n * @desc 以0为中心取整\r\n * @param {number} num 数值\r\n * @return {number} 取整之后的结果\r\n * @example Mathx.roundToZero(0.8 ); // 0;\r\n * Mathx.roundToZero(-0.8); // 0;\r\n * Mathx.roundToZero(-1.1); // -1;\r\n */\r\nvar floorToZeroCommon = (num) => {\r\n    return num < 0 ? Math.ceil(num) : Math.floor(num);\r\n};\n\nlet circle, v;\r\n/**\r\n * @function clampCircle\r\n * @desc 将目标值限定在指定周期区间内。假定min小于等于max才能得到正确的结果。\r\n * @param {number} val 目标值\r\n * @param {number} min 最小值，必须小于等于max\r\n * @param {number} max 最大值，必须大于等于min\r\n * @returns {number} 限制之后的值\r\n * @example Mathx.clampCircle(3 * Math.PI, 0, 2 * Math.PI); // Math.PI;\r\n * Mathx.clampCircle(2 * Math.PI, -Math.PI, Math.PI); // 0;\r\n */\r\nvar clampCircle = (val, min, max) => {\r\n    circle = max - min;\r\n    v = floorToZeroCommon(min / circle) * circle + (val % circle);\r\n    if (v < min) {\r\n        return v + circle;\r\n    }\r\n    else if (v > max) {\r\n        return v - circle;\r\n    }\r\n    return v;\r\n};\n\n/**\r\n * @function clampSafe\r\n * @desc 与clamp函数功能一样，将目标值限定在指定区间内。但此函数是安全的，不要求第二个参数必须小于第三个参数\r\n * @see clamp\r\n * @param {number} val 目标值\r\n * @param {number} a 区间中一个最值\r\n * @param {number} b 区间中另一个最值\r\n * @returns {number} 限制之后的值\r\n * @example Mathx.clamp(1, 0, 2); // 1;\r\n * Mathx.clamp(1, 2, 0); // 1;\r\n * Mathx.clamp(-1, 0, 2); // 0;\r\n * Mathx.clamp(-1, 2, 0); // 0;\r\n * Mathx.clamp(3, 0, 2); // 2;\r\n * Mathx.clamp(3, 2, 0); // 2;\r\n */\r\nvar clampSafeCommon = (val, a, b) => {\r\n    if (a > b) {\r\n        return Math.max(b, Math.min(a, val));\r\n    }\r\n    else if (b > a) {\r\n        return Math.max(a, Math.min(b, val));\r\n    }\r\n    return a;\r\n};\n\nconst DEG_360_RAD = Math.PI * 2;\r\nconst EPSILON = Math.pow(2, -52);\n\n/**\r\n * @function closeTo\r\n * @desc 判断一个数是否在另一个数的邻域内，通常用于检验浮点计算是否精度在EPSILON以内\r\n * @param {number} val 需要判断的数值\r\n * @param {number} target 目标数值\r\n * @param {number} [epsilon = Number.EPSILON] 邻域半径\r\n * @example Mathx.closeTo(0.1 + 0.2, 0.3); // true;\r\n * Mathx.clamp(2, 3, 1); // true;\r\n * Mathx.clamp(2, 3, 0.5); // false;\r\n */\r\nvar closeToCommon = (val, target, epsilon = EPSILON) => {\r\n    return Math.abs(val - target) <= epsilon;\r\n};\n\nvar floorPowerOfTwo = (value) => {\r\n    return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));\r\n};\n\nvar isPowerOfTwo = (value) => {\r\n    return (value & (value - 1)) === 0 && value !== 0;\r\n};\n\nvar randFloat = (min = 0, max = 1) => {\r\n    return min + Math.random() * (max - min);\r\n};\n\nvar randInt = (min = 0, max = 1) => {\r\n    return min + Math.floor(Math.random() * (max - min + 1));\r\n};\n\nlet len = 0, sum = 0;\r\n/**\r\n * @function sumArray\r\n * @desc 求数组的和\r\n * @see sum\r\n * @param {number[]} arr\r\n * @returns {number} 和\r\n * @example Mathx.sumArray([1, 2, 3]); // 6;\r\n */\r\nvar sumArray = (arr) => {\r\n    sum = 0;\r\n    len = arr.length;\r\n    for (let i = 0; i < len; i++) {\r\n        sum += arr[i];\r\n    }\r\n    return sum;\r\n};\n\n/**\r\n * @function sum\r\n * @desc 求参数之和\r\n * @see sumArray\r\n * @param {number[]} arr\r\n * @returns {number} 和\r\n * @example Mathx.sumArray(1, 2, 3); // 6;\r\n * Mathx.sumArray(1, 2, 3, 4, 5); // 15;\r\n */\r\nvar sum$1 = (...arr) => {\r\n    return sumArray(arr);\r\n};\n\nlet a00 = 0, a01 = 0, a10 = 0, a11 = 0;\r\nlet b00 = 0, b01 = 0, b10 = 0, b11 = 0, det = 0;\r\nlet x = 0, y = 0;\r\nconst UNIT_MATRIX2_DATA = [\r\n    1, 0,\r\n    0, 1,\r\n];\r\nconst UNIT_MATRIX2 = new Float32Array(UNIT_MATRIX2_DATA);\r\nconst add = (a, b, out) => {\r\n    out[0] = a[0] + b[0];\r\n    out[1] = a[1] + b[1];\r\n    out[2] = a[2] + b[2];\r\n    out[3] = a[3] + b[3];\r\n    return out;\r\n};\r\nconst adjoint = (a, out) => {\r\n    a00 = a[0];\r\n    out[0] = a[3];\r\n    out[1] = -a[1];\r\n    out[2] = -a[2];\r\n    out[3] = a00;\r\n    return out;\r\n};\r\nconst closeTo = (a, b) => {\r\n    a00 = a[0];\r\n    a10 = a[1];\r\n    a01 = a[2];\r\n    a11 = a[3];\r\n    b00 = b[0];\r\n    b10 = b[1];\r\n    b01 = b[2];\r\n    b11 = b[3];\r\n    return closeToCommon(a00, b00) && closeToCommon(a01, b01) && closeToCommon(a10, b10) && closeToCommon(a11, b11);\r\n};\r\nconst create$1 = (a = UNIT_MATRIX2_DATA) => {\r\n    return new Float32Array(a);\r\n};\r\nconst determinant = (a) => {\r\n    return a[0] * a[3] - a[1] * a[2];\r\n};\r\nconst equals = (a, b) => {\r\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\r\n};\r\nconst frobNorm = (a) => {\r\n    return Math.hypot(a[0], a[1], a[2], a[3]);\r\n};\r\nconst from = (a, out = new Float32Array(4)) => {\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[3];\r\n    return out;\r\n};\r\nconst fromRotation = (rad, out = new Float32Array(4)) => {\r\n    y = Math.sin(rad);\r\n    x = Math.cos(rad);\r\n    out[0] = x;\r\n    out[1] = y;\r\n    out[2] = -y;\r\n    out[3] = x;\r\n    return out;\r\n};\r\nconst fromScaling = (v, out = new Float32Array(4)) => {\r\n    out[0] = v[0];\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = v[1];\r\n    return out;\r\n};\r\nconst identity = (out = new Float32Array(4)) => {\r\n    out[0] = 1;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 1;\r\n    return out;\r\n};\r\nfunction invert(a, out = new Float32Array(4)) {\r\n    a00 = a[0];\r\n    a10 = a[1];\r\n    a01 = a[2];\r\n    a11 = a[3];\r\n    det = determinant(a);\r\n    if (!det) {\r\n        return null;\r\n    }\r\n    det = 1.0 / det;\r\n    out[0] = a11 * det;\r\n    out[1] = -a10 * det;\r\n    out[2] = -a01 * det;\r\n    out[3] = a00 * det;\r\n    return out;\r\n}\r\nfunction minus(a, b, out = new Float32Array(4)) {\r\n    out[0] = a[0] - b[0];\r\n    out[1] = a[1] - b[1];\r\n    out[2] = a[2] - b[2];\r\n    out[3] = a[3] - b[3];\r\n    return out;\r\n}\r\nconst multiply = (a, b, out = new Float32Array(4)) => {\r\n    a00 = a[0];\r\n    a10 = a[1];\r\n    a01 = a[2];\r\n    a11 = a[3];\r\n    b00 = b[0];\r\n    b10 = b[1];\r\n    b01 = b[2];\r\n    b11 = b[3];\r\n    out[0] = a00 * b00 + a01 * b10;\r\n    out[1] = a10 * b00 + a11 * b10;\r\n    out[2] = a00 * b01 + a01 * b11;\r\n    out[3] = a10 * b01 + a11 * b11;\r\n    return out;\r\n};\r\nconst multiplyScalar = (a, b, out = new Float32Array(4)) => {\r\n    out[0] = a[0] * b;\r\n    out[1] = a[1] * b;\r\n    out[2] = a[2] * b;\r\n    out[3] = a[3] * b;\r\n    return out;\r\n};\r\nconst rotate = (a, rad, out = new Float32Array(4)) => {\r\n    a00 = a[0];\r\n    a10 = a[1];\r\n    a01 = a[2];\r\n    a11 = a[3];\r\n    y = Math.sin(rad);\r\n    x = Math.cos(rad);\r\n    out[0] = a00 * x + a01 * y;\r\n    out[1] = a10 * x + a11 * y;\r\n    out[2] = a00 * -y + a01 * x;\r\n    out[3] = a10 * -y + a11 * x;\r\n    return out;\r\n};\r\nconst scale = (a, v, out = new Float32Array(4)) => {\r\n    a00 = a[0];\r\n    a10 = a[1];\r\n    a01 = a[2];\r\n    a11 = a[3];\r\n    x = v[0];\r\n    y = v[1];\r\n    out[0] = a00 * x;\r\n    out[1] = a10 * x;\r\n    out[2] = a01 * y;\r\n    out[3] = a11 * y;\r\n    return out;\r\n};\r\nfunction toString(a) {\r\n    return `mat2(${a[0]}, ${a[1]}, ${a[2]}, ${a[3]})`;\r\n}\r\nconst transpose = (a, out = new Float32Array(4)) => {\r\n    if (out === a) {\r\n        a01 = a[1];\r\n        out[1] = a[2];\r\n        out[2] = a01;\r\n    }\r\n    else {\r\n        out[0] = a[0];\r\n        out[1] = a[2];\r\n        out[2] = a[1];\r\n        out[3] = a[3];\r\n    }\r\n    return out;\r\n};\n\nvar Matrix2 = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tUNIT_MATRIX2: UNIT_MATRIX2,\n\tadd: add,\n\tadjoint: adjoint,\n\tcloseTo: closeTo,\n\tcreate: create$1,\n\tdeterminant: determinant,\n\tequals: equals,\n\tfrobNorm: frobNorm,\n\tfrom: from,\n\tfromRotation: fromRotation,\n\tfromScaling: fromScaling,\n\tidentity: identity,\n\tinvert: invert,\n\tminus: minus,\n\tmultiply: multiply,\n\tmultiplyScalar: multiplyScalar,\n\trotate: rotate,\n\tscale: scale,\n\ttoString: toString,\n\ttranspose: transpose\n});\n\nlet a00$1 = 0, a01$1 = 0, a02 = 0, a11$1 = 0, a10$1 = 0, a12 = 0, a20 = 0, a21 = 0, a22 = 0;\r\nlet b00$1 = 0, b01$1 = 0, b02 = 0, b11$1 = 0, b10$1 = 0, b12 = 0, b20 = 0, b21 = 0, b22 = 0;\r\nlet x$1 = 0, y$1 = 0;\r\nconst UNIT_MATRIX3_DATA = [\r\n    1, 0, 0,\r\n    0, 1, 0,\r\n    0, 0, 1\r\n];\r\nconst UNIT_MATRIX3 = new Float32Array(UNIT_MATRIX3_DATA);\r\nconst cofactor00 = (a) => {\r\n    return a[4] * a[8] - a[5] * a[7];\r\n};\r\nconst cofactor01 = (a) => {\r\n    return a[1] * a[8] - a[7] * a[2];\r\n};\r\nconst cofactor02 = (a) => {\r\n    return a[1] * a[5] - a[4] * a[2];\r\n};\r\nconst cofactor10 = (a) => {\r\n    return a[3] * a[8] - a[6] * a[5];\r\n};\r\nconst cofactor11 = (a) => {\r\n    return a[0] * a[8] - a[6] * a[2];\r\n};\r\nconst cofactor12 = (a) => {\r\n    return a[0] * a[5] - a[3] * a[2];\r\n};\r\nconst cofactor20 = (a) => {\r\n    return a[3] * a[7] - a[6] * a[4];\r\n};\r\nconst cofactor21 = (a) => {\r\n    return a[0] * a[7] - a[6] * a[1];\r\n};\r\nconst cofactor22 = (a) => {\r\n    return a[0] * a[4] - a[3] * a[1];\r\n};\r\nconst create$2 = () => {\r\n    return new Float32Array(UNIT_MATRIX3_DATA);\r\n};\r\nconst determinant$1 = (a) => {\r\n    a00$1 = a[0],\r\n        a01$1 = a[1],\r\n        a02 = a[2];\r\n    a10$1 = a[3],\r\n        a11$1 = a[4],\r\n        a12 = a[5];\r\n    a20 = a[6],\r\n        a21 = a[7],\r\n        a22 = a[8];\r\n    return (a00$1 * (a22 * a11$1 - a12 * a21) +\r\n        a01$1 * (-a22 * a10$1 + a12 * a20) +\r\n        a02 * (a21 * a10$1 - a11$1 * a20));\r\n};\r\nconst from$1 = (arr, out = new Float32Array(9)) => {\r\n    out[0] = arr[0];\r\n    out[1] = arr[1];\r\n    out[2] = arr[2];\r\n    out[3] = arr[3];\r\n    out[4] = arr[4];\r\n    out[5] = arr[5];\r\n    out[6] = arr[6];\r\n    out[7] = arr[7];\r\n    out[8] = arr[8];\r\n    return out;\r\n};\r\nconst fromMatrix4 = (mat4, out = new Float32Array(9)) => {\r\n    out[0] = mat4[0];\r\n    out[1] = mat4[1];\r\n    out[2] = mat4[2];\r\n    out[3] = mat4[4];\r\n    out[4] = mat4[5];\r\n    out[5] = mat4[6];\r\n    out[6] = mat4[8];\r\n    out[7] = mat4[9];\r\n    out[8] = mat4[10];\r\n    return out;\r\n};\r\nconst fromRotation$1 = (rad, out = new Float32Array(9)) => {\r\n    y$1 = Math.sin(rad);\r\n    x$1 = Math.cos(rad);\r\n    out[0] = x$1;\r\n    out[1] = y$1;\r\n    out[2] = 0;\r\n    out[3] = -y$1;\r\n    out[4] = x$1;\r\n    out[5] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 1;\r\n    return out;\r\n};\r\nconst fromScaling$1 = (v, out) => {\r\n    out[0] = v[0];\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = v[1];\r\n    out[5] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 1;\r\n    return out;\r\n};\r\nfunction fromTranslation(v, out = new Float32Array(9)) {\r\n    out[0] = 1;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 1;\r\n    out[5] = 0;\r\n    out[6] = v[0];\r\n    out[7] = v[1];\r\n    out[8] = 1;\r\n    return out;\r\n}\r\nconst identity$1 = (out = new Float32Array(9)) => {\r\n    out[0] = 1;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 1;\r\n    out[5] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 1;\r\n    return out;\r\n};\r\nconst invert$1 = (a, out) => {\r\n    a00$1 = a[0],\r\n        a01$1 = a[1],\r\n        a02 = a[2];\r\n    a10$1 = a[3],\r\n        a11$1 = a[4],\r\n        a12 = a[5];\r\n    a20 = a[6],\r\n        a21 = a[7],\r\n        a22 = a[8];\r\n    b01$1 = a22 * a11$1 - a12 * a21;\r\n    b11$1 = -a22 * a10$1 + a12 * a20;\r\n    b21 = a21 * a10$1 - a11$1 * a20;\r\n    let det = a00$1 * b01$1 + a01$1 * b11$1 + a02 * b21;\r\n    if (!det) {\r\n        return null;\r\n    }\r\n    det = 1.0 / det;\r\n    out[0] = b01$1 * det;\r\n    out[1] = (-a22 * a01$1 + a02 * a21) * det;\r\n    out[2] = (a12 * a01$1 - a02 * a11$1) * det;\r\n    out[3] = b11$1 * det;\r\n    out[4] = (a22 * a00$1 - a02 * a20) * det;\r\n    out[5] = (-a12 * a00$1 + a02 * a10$1) * det;\r\n    out[6] = b21 * det;\r\n    out[7] = (-a21 * a00$1 + a01$1 * a20) * det;\r\n    out[8] = (a11$1 * a00$1 - a01$1 * a10$1) * det;\r\n    return out;\r\n};\r\nconst multiply$1 = () => (a, b, out = new Float32Array(9)) => {\r\n    a00$1 = a[0],\r\n        a01$1 = a[1],\r\n        a02 = a[2];\r\n    a10$1 = a[3],\r\n        a11$1 = a[4],\r\n        a12 = a[5];\r\n    a20 = a[6],\r\n        a21 = a[7],\r\n        a22 = a[8];\r\n    b00$1 = b[0],\r\n        b01$1 = b[1],\r\n        b02 = b[2];\r\n    b10$1 = b[3],\r\n        b11$1 = b[4],\r\n        b12 = b[5];\r\n    b20 = b[6],\r\n        b21 = b[7],\r\n        b22 = b[8];\r\n    out[0] = b00$1 * a00$1 + b01$1 * a10$1 + b02 * a20;\r\n    out[1] = b00$1 * a01$1 + b01$1 * a11$1 + b02 * a21;\r\n    out[2] = b00$1 * a02 + b01$1 * a12 + b02 * a22;\r\n    out[3] = b10$1 * a00$1 + b11$1 * a10$1 + b12 * a20;\r\n    out[4] = b10$1 * a01$1 + b11$1 * a11$1 + b12 * a21;\r\n    out[5] = b10$1 * a02 + b11$1 * a12 + b12 * a22;\r\n    out[6] = b20 * a00$1 + b21 * a10$1 + b22 * a20;\r\n    out[7] = b20 * a01$1 + b21 * a11$1 + b22 * a21;\r\n    out[8] = b20 * a02 + b21 * a12 + b22 * a22;\r\n    return out;\r\n};\r\nconst rotate$1 = (a, rad, out = new Float32Array(9)) => {\r\n    a00$1 = a[0],\r\n        a01$1 = a[1],\r\n        a02 = a[2],\r\n        a10$1 = a[3],\r\n        a11$1 = a[4],\r\n        a12 = a[5],\r\n        a20 = a[6],\r\n        a21 = a[7],\r\n        a22 = a[8],\r\n        y$1 = Math.sin(rad),\r\n        x$1 = Math.cos(rad);\r\n    out[0] = x$1 * a00$1 + y$1 * a10$1;\r\n    out[1] = x$1 * a01$1 + y$1 * a11$1;\r\n    out[2] = x$1 * a02 + y$1 * a12;\r\n    out[3] = y$1 * a10$1 - x$1 * a00$1;\r\n    out[4] = y$1 * a11$1 - x$1 * a01$1;\r\n    out[5] = y$1 * a12 - x$1 * a02;\r\n    out[6] = a20;\r\n    out[7] = a21;\r\n    out[8] = a22;\r\n    return out;\r\n};\r\nfunction scale$1(a, v, out = new Float32Array(9)) {\r\n    x$1 = v[0];\r\n    y$1 = v[1];\r\n    out[0] = x$1 * a[0];\r\n    out[1] = x$1 * a[1];\r\n    out[2] = x$1 * a[2];\r\n    out[3] = y$1 * a[3];\r\n    out[4] = y$1 * a[4];\r\n    out[5] = y$1 * a[5];\r\n    out[6] = a[6];\r\n    out[7] = a[7];\r\n    out[8] = a[8];\r\n    return out;\r\n}\r\nconst translate = (a, v, out = new Float32Array(9)) => {\r\n    a00$1 = a[0];\r\n    a01$1 = a[1];\r\n    a02 = a[2];\r\n    a10$1 = a[3];\r\n    a11$1 = a[4];\r\n    a12 = a[5];\r\n    a20 = a[6];\r\n    a21 = a[7];\r\n    a22 = a[8];\r\n    x$1 = v[0];\r\n    y$1 = v[1];\r\n    out[0] = a00$1;\r\n    out[1] = a01$1;\r\n    out[2] = a02;\r\n    out[3] = a10$1;\r\n    out[4] = a11$1;\r\n    out[5] = a12;\r\n    out[6] = x$1 * a00$1 + y$1 * a10$1 + a20;\r\n    out[7] = x$1 * a01$1 + y$1 * a11$1 + a21;\r\n    out[8] = x$1 * a02 + y$1 * a12 + a22;\r\n    return out;\r\n};\r\nconst transpose$1 = (a, out = new Float32Array(9)) => {\r\n    if (out === a) {\r\n        a01$1 = a[1];\r\n        a02 = a[2];\r\n        a12 = a[5];\r\n        out[1] = a[3];\r\n        out[2] = a[6];\r\n        out[3] = a01$1;\r\n        out[5] = a[7];\r\n        out[6] = a02;\r\n        out[7] = a12;\r\n    }\r\n    else {\r\n        out[0] = a[0];\r\n        out[1] = a[3];\r\n        out[2] = a[6];\r\n        out[3] = a[1];\r\n        out[4] = a[4];\r\n        out[5] = a[7];\r\n        out[6] = a[2];\r\n        out[7] = a[5];\r\n        out[8] = a[8];\r\n    }\r\n    return out;\r\n};\n\nvar Matrix3 = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tUNIT_MATRIX3: UNIT_MATRIX3,\n\tcofactor00: cofactor00,\n\tcofactor01: cofactor01,\n\tcofactor02: cofactor02,\n\tcofactor10: cofactor10,\n\tcofactor11: cofactor11,\n\tcofactor12: cofactor12,\n\tcofactor20: cofactor20,\n\tcofactor21: cofactor21,\n\tcofactor22: cofactor22,\n\tcreate: create$2,\n\tdeterminant: determinant$1,\n\tfrom: from$1,\n\tfromMatrix4: fromMatrix4,\n\tfromRotation: fromRotation$1,\n\tfromScaling: fromScaling$1,\n\tfromTranslation: fromTranslation,\n\tidentity: identity$1,\n\tinvert: invert$1,\n\tmultiply: multiply$1,\n\trotate: rotate$1,\n\tscale: scale$1,\n\ttranslate: translate,\n\ttranspose: transpose$1\n});\n\nvar EulerRotationOrders;\r\n(function (EulerRotationOrders) {\r\n    EulerRotationOrders[\"XYZ\"] = \"xyz\";\r\n    EulerRotationOrders[\"ZXY\"] = \"zxy\";\r\n    EulerRotationOrders[\"YZX\"] = \"yzx\";\r\n    EulerRotationOrders[\"XZY\"] = \"xzy\";\r\n    EulerRotationOrders[\"ZYX\"] = \"zyx\";\r\n    EulerRotationOrders[\"YXZ\"] = \"yxz\";\r\n})(EulerRotationOrders || (EulerRotationOrders = {}));\n\nlet a00$2 = 0, a01$2 = 0, a02$1 = 0, a03 = 0, a11$2 = 0, a10$2 = 0, a12$1 = 0, a13 = 0, a20$1 = 0, a21$1 = 0, a22$1 = 0, a23 = 0, a31 = 0, a30 = 0, a32 = 0, a33 = 0;\r\nlet b00$2 = 0, b01$2 = 0, b02$1 = 0, b03 = 0, b11$2 = 0, b10$2 = 0, b12$1 = 0, b13 = 0, b20$1 = 0, b21$1 = 0, b22$1 = 0, b23 = 0, b31 = 0, b30 = 0, b32 = 0, b33 = 0;\r\nlet x$2 = 0, y$2 = 0, z = 0, det$1 = 0, len$1 = 0, s = 0, t = 0, a = 0, b = 0, c = 0, d = 0, e = 0, f = 0;\r\nconst UNIT_MATRIX4_DATA = Object.freeze([\r\n    1, 0, 0, 0,\r\n    0, 1, 0, 0,\r\n    0, 0, 1, 0,\r\n    0, 0, 0, 1\r\n]);\r\nconst UNIT_MATRIX4 = new Float32Array(UNIT_MATRIX4_DATA);\r\nconst create$3 = () => {\r\n    return new Float32Array(UNIT_MATRIX4_DATA);\r\n};\r\nconst determinant$2 = (a) => {\r\n    a00$2 = a[0],\r\n        a01$2 = a[1],\r\n        a02$1 = a[2],\r\n        a03 = a[3];\r\n    a10$2 = a[4],\r\n        a11$2 = a[5],\r\n        a12$1 = a[6],\r\n        a13 = a[7];\r\n    a20$1 = a[8],\r\n        a21$1 = a[9],\r\n        a22$1 = a[10],\r\n        a23 = a[11];\r\n    a30 = a[12],\r\n        a31 = a[13],\r\n        a32 = a[14],\r\n        a33 = a[15];\r\n    b00$2 = a00$2 * a11$2 - a01$2 * a10$2;\r\n    b01$2 = a00$2 * a12$1 - a02$1 * a10$2;\r\n    b02$1 = a01$2 * a12$1 - a02$1 * a11$2;\r\n    b03 = a20$1 * a31 - a21$1 * a30;\r\n    b10$2 = a20$1 * a32 - a22$1 * a30;\r\n    b11$2 = a21$1 * a32 - a22$1 * a31;\r\n    b12$1 = a00$2 * b11$2 - a01$2 * b10$2 + a02$1 * b03;\r\n    b13 = a10$2 * b11$2 - a11$2 * b10$2 + a12$1 * b03;\r\n    b20$1 = a20$1 * b02$1 - a21$1 * b01$2 + a22$1 * b00$2;\r\n    b21$1 = a30 * b02$1 - a31 * b01$2 + a32 * b00$2;\r\n    return a13 * b12$1 - a03 * b13 + a33 * b20$1 - a23 * b21$1;\r\n};\r\nconst from$2 = (a, out = new Float32Array(16)) => {\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[3];\r\n    out[4] = a[4];\r\n    out[5] = a[5];\r\n    out[6] = a[6];\r\n    out[7] = a[7];\r\n    out[8] = a[8];\r\n    out[9] = a[9];\r\n    out[10] = a[10];\r\n    out[11] = a[11];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n    return out;\r\n};\r\nconst fromEuler = (euler, out = new Float32Array(16)) => {\r\n    x$2 = euler.x;\r\n    y$2 = euler.y;\r\n    z = euler.z;\r\n    a = Math.cos(x$2), b = Math.sin(x$2);\r\n    c = Math.cos(y$2), d = Math.sin(y$2);\r\n    e = Math.cos(z), f = Math.sin(z);\r\n    if (euler.order === EulerRotationOrders.XYZ) {\r\n        const ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n        out[0] = c * e;\r\n        out[4] = -c * f;\r\n        out[8] = d;\r\n        out[1] = af + be * d;\r\n        out[5] = ae - bf * d;\r\n        out[9] = -b * c;\r\n        out[2] = bf - ae * d;\r\n        out[6] = be + af * d;\r\n        out[10] = a * c;\r\n    }\r\n    else if (euler.order === EulerRotationOrders.YXZ) {\r\n        const ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n        out[0] = ce + df * b;\r\n        out[4] = de * b - cf;\r\n        out[8] = a * d;\r\n        out[1] = a * f;\r\n        out[5] = a * e;\r\n        out[9] = -b;\r\n        out[2] = cf * b - de;\r\n        out[6] = df + ce * b;\r\n        out[10] = a * c;\r\n    }\r\n    else if (euler.order === EulerRotationOrders.ZXY) {\r\n        const ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n        out[0] = ce - df * b;\r\n        out[4] = -a * f;\r\n        out[8] = de + cf * b;\r\n        out[1] = cf + de * b;\r\n        out[5] = a * e;\r\n        out[9] = df - ce * b;\r\n        out[2] = -a * d;\r\n        out[6] = b;\r\n        out[10] = a * c;\r\n    }\r\n    else if (euler.order === EulerRotationOrders.ZYX) {\r\n        const ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n        out[0] = c * e;\r\n        out[4] = be * d - af;\r\n        out[8] = ae * d + bf;\r\n        out[1] = c * f;\r\n        out[5] = bf * d + ae;\r\n        out[9] = af * d - be;\r\n        out[2] = -d;\r\n        out[6] = b * c;\r\n        out[10] = a * c;\r\n    }\r\n    else if (euler.order === EulerRotationOrders.YZX) {\r\n        const ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n        out[0] = c * e;\r\n        out[4] = bd - ac * f;\r\n        out[8] = bc * f + ad;\r\n        out[1] = f;\r\n        out[5] = a * e;\r\n        out[9] = -b * e;\r\n        out[2] = -d * e;\r\n        out[6] = ad * f + bc;\r\n        out[10] = ac - bd * f;\r\n    }\r\n    else if (euler.order === EulerRotationOrders.XZY) {\r\n        const ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n        out[0] = c * e;\r\n        out[4] = -f;\r\n        out[8] = d * e;\r\n        out[1] = ac * f + bd;\r\n        out[5] = a * e;\r\n        out[9] = ad * f - bc;\r\n        out[2] = bc * f - ad;\r\n        out[6] = b * e;\r\n        out[10] = bd * f + ac;\r\n    }\r\n    // bottom row\r\n    out[3] = 0;\r\n    out[7] = 0;\r\n    out[11] = 0;\r\n    // last column\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 0;\r\n    out[15] = 1;\r\n    return out;\r\n};\r\nfunction fromQuaternion(q, out) {\r\n    let x = q[0], y = q[1], z = q[2], w = q[3];\r\n    let x2 = x + x;\r\n    let y2 = y + y;\r\n    let z2 = z + z;\r\n    let xx = x * x2;\r\n    let yx = y * x2;\r\n    let yy = y * y2;\r\n    let zx = z * x2;\r\n    let zy = z * y2;\r\n    let zz = z * z2;\r\n    let wx = w * x2;\r\n    let wy = w * y2;\r\n    let wz = w * z2;\r\n    out[0] = 1 - yy - zz;\r\n    out[1] = yx + wz;\r\n    out[2] = zx - wy;\r\n    out[3] = 0;\r\n    out[4] = yx - wz;\r\n    out[5] = 1 - xx - zz;\r\n    out[6] = zy + wx;\r\n    out[7] = 0;\r\n    out[8] = zx + wy;\r\n    out[9] = zy - wx;\r\n    out[10] = 1 - xx - yy;\r\n    out[11] = 0;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 0;\r\n    out[15] = 1;\r\n    return out;\r\n}\r\nconst fromRotation$2 = (rad, axis, out) => {\r\n    x$2 = axis[0];\r\n    y$2 = axis[1];\r\n    z = axis[2];\r\n    len$1 = Math.hypot(x$2, y$2, z);\r\n    if (len$1 < EPSILON) {\r\n        return null;\r\n    }\r\n    len$1 = 1 / len$1;\r\n    x$2 *= len$1;\r\n    y$2 *= len$1;\r\n    z *= len$1;\r\n    s = Math.sin(rad);\r\n    c = Math.cos(rad);\r\n    t = 1 - c;\r\n    out[0] = x$2 * x$2 * t + c;\r\n    out[1] = y$2 * x$2 * t + z * s;\r\n    out[2] = z * x$2 * t - y$2 * s;\r\n    out[3] = 0;\r\n    out[4] = x$2 * y$2 * t - z * s;\r\n    out[5] = y$2 * y$2 * t + c;\r\n    out[6] = z * y$2 * t + x$2 * s;\r\n    out[7] = 0;\r\n    out[8] = x$2 * z * t + y$2 * s;\r\n    out[9] = y$2 * z * t - x$2 * s;\r\n    out[10] = z * z * t + c;\r\n    out[11] = 0;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 0;\r\n    out[15] = 1;\r\n    return out;\r\n};\r\nconst fromRotationX = (rad, out) => {\r\n    s = Math.sin(rad);\r\n    c = Math.cos(rad);\r\n    out[0] = 1;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[5] = c;\r\n    out[6] = s;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = -s;\r\n    out[10] = c;\r\n    out[11] = 0;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 0;\r\n    out[15] = 1;\r\n    return out;\r\n};\r\nconst fromRotationY = (rad, out) => {\r\n    s = Math.sin(rad);\r\n    c = Math.cos(rad);\r\n    out[0] = c;\r\n    out[1] = 0;\r\n    out[2] = -s;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[5] = 1;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = s;\r\n    out[9] = 0;\r\n    out[10] = c;\r\n    out[11] = 0;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 0;\r\n    out[15] = 1;\r\n    return out;\r\n};\r\nconst fromRotationZ = (rad, out) => {\r\n    s = Math.sin(rad);\r\n    c = Math.cos(rad);\r\n    out[0] = c;\r\n    out[1] = s;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = -s;\r\n    out[5] = c;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[10] = 1;\r\n    out[11] = 0;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 0;\r\n    out[15] = 1;\r\n    return out;\r\n};\r\nconst fromScaling$2 = (v, out = new Float32Array(16)) => {\r\n    out[0] = v[0];\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[5] = v[1];\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[10] = v[2];\r\n    out[11] = 0;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 0;\r\n    out[15] = 1;\r\n    return out;\r\n};\r\nconst fromTranslation$1 = (v, out = new Float32Array(16)) => {\r\n    out[0] = 1;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[5] = 1;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[10] = 1;\r\n    out[11] = 0;\r\n    out[12] = v[0];\r\n    out[13] = v[1];\r\n    out[14] = v[2];\r\n    out[15] = 1;\r\n    return out;\r\n};\r\nconst identity$2 = (out = new Float32Array(16)) => {\r\n    out[0] = 1;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[5] = 1;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[10] = 1;\r\n    out[11] = 0;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 0;\r\n    out[15] = 1;\r\n    return out;\r\n};\r\nfunction invert$2(a, out = new Float32Array(16)) {\r\n    a00$2 = a[0],\r\n        a01$2 = a[1],\r\n        a02$1 = a[2],\r\n        a03 = a[3];\r\n    a10$2 = a[4],\r\n        a11$2 = a[5],\r\n        a12$1 = a[6],\r\n        a13 = a[7];\r\n    a20$1 = a[8],\r\n        a21$1 = a[9],\r\n        a22$1 = a[10],\r\n        a23 = a[11];\r\n    a30 = a[12],\r\n        a31 = a[13],\r\n        a32 = a[14],\r\n        a33 = a[15];\r\n    b00$2 = a00$2 * a11$2 - a01$2 * a10$2;\r\n    b01$2 = a00$2 * a12$1 - a02$1 * a10$2;\r\n    b02$1 = a00$2 * a13 - a03 * a10$2;\r\n    b03 = a01$2 * a12$1 - a02$1 * a11$2;\r\n    b20$1 = a01$2 * a13 - a03 * a11$2;\r\n    b21$1 = a02$1 * a13 - a03 * a12$1;\r\n    b22$1 = a20$1 * a31 - a21$1 * a30;\r\n    b23 = a20$1 * a32 - a22$1 * a30;\r\n    b30 = a20$1 * a33 - a23 * a30;\r\n    b31 = a21$1 * a32 - a22$1 * a31;\r\n    b32 = a21$1 * a33 - a23 * a31;\r\n    b33 = a22$1 * a33 - a23 * a32;\r\n    det$1 =\r\n        b00$2 * b33 - b01$2 * b32 + b02$1 * b31 + b03 * b30 - b20$1 * b23 + b21$1 * b22$1;\r\n    if (!det$1) {\r\n        return null;\r\n    }\r\n    det$1 = 1.0 / det$1;\r\n    out[0] = (a11$2 * b33 - a12$1 * b32 + a13 * b31) * det$1;\r\n    out[1] = (a02$1 * b32 - a01$2 * b33 - a03 * b31) * det$1;\r\n    out[2] = (a31 * b21$1 - a32 * b20$1 + a33 * b03) * det$1;\r\n    out[3] = (a22$1 * b20$1 - a21$1 * b21$1 - a23 * b03) * det$1;\r\n    out[4] = (a12$1 * b30 - a10$2 * b33 - a13 * b23) * det$1;\r\n    out[5] = (a00$2 * b33 - a02$1 * b30 + a03 * b23) * det$1;\r\n    out[6] = (a32 * b02$1 - a30 * b21$1 - a33 * b01$2) * det$1;\r\n    out[7] = (a20$1 * b21$1 - a22$1 * b02$1 + a23 * b01$2) * det$1;\r\n    out[8] = (a10$2 * b32 - a11$2 * b30 + a13 * b22$1) * det$1;\r\n    out[9] = (a01$2 * b30 - a00$2 * b32 - a03 * b22$1) * det$1;\r\n    out[10] = (a30 * b20$1 - a31 * b02$1 + a33 * b00$2) * det$1;\r\n    out[11] = (a21$1 * b02$1 - a20$1 * b20$1 - a23 * b00$2) * det$1;\r\n    out[12] = (a11$2 * b23 - a10$2 * b31 - a12$1 * b22$1) * det$1;\r\n    out[13] = (a00$2 * b31 - a01$2 * b23 + a02$1 * b22$1) * det$1;\r\n    out[14] = (a31 * b01$2 - a30 * b03 - a32 * b00$2) * det$1;\r\n    out[15] = (a20$1 * b03 - a21$1 * b01$2 + a22$1 * b00$2) * det$1;\r\n    return out;\r\n}\r\nconst lookAt = (eye, center, up, out) => {\r\n    let x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\r\n    let eyex = eye[0];\r\n    let eyey = eye[1];\r\n    let eyez = eye[2];\r\n    let upx = up[0];\r\n    let upy = up[1];\r\n    let upz = up[2];\r\n    let centerx = center[0];\r\n    let centery = center[1];\r\n    let centerz = center[2];\r\n    if (Math.abs(eyex - centerx) < EPSILON &&\r\n        Math.abs(eyey - centery) < EPSILON &&\r\n        Math.abs(eyez - centerz) < EPSILON) {\r\n        return identity$2(out);\r\n    }\r\n    z0 = eyex - centerx;\r\n    z1 = eyey - centery;\r\n    z2 = eyez - centerz;\r\n    len = 1 / Math.hypot(z0, z1, z2);\r\n    z0 *= len;\r\n    z1 *= len;\r\n    z2 *= len;\r\n    x0 = upy * z2 - upz * z1;\r\n    x1 = upz * z0 - upx * z2;\r\n    x2 = upx * z1 - upy * z0;\r\n    len = Math.hypot(x0, x1, x2);\r\n    if (!len) {\r\n        x0 = 0;\r\n        x1 = 0;\r\n        x2 = 0;\r\n    }\r\n    else {\r\n        len = 1 / len;\r\n        x0 *= len;\r\n        x1 *= len;\r\n        x2 *= len;\r\n    }\r\n    y0 = z1 * x2 - z2 * x1;\r\n    y1 = z2 * x0 - z0 * x2;\r\n    y2 = z0 * x1 - z1 * x0;\r\n    len = Math.hypot(y0, y1, y2);\r\n    if (!len) {\r\n        y0 = 0;\r\n        y1 = 0;\r\n        y2 = 0;\r\n    }\r\n    else {\r\n        len = 1 / len;\r\n        y0 *= len;\r\n        y1 *= len;\r\n        y2 *= len;\r\n    }\r\n    out[0] = x0;\r\n    out[1] = y0;\r\n    out[2] = z0;\r\n    out[3] = 0;\r\n    out[4] = x1;\r\n    out[5] = y1;\r\n    out[6] = z1;\r\n    out[7] = 0;\r\n    out[8] = x2;\r\n    out[9] = y2;\r\n    out[10] = z2;\r\n    out[11] = 0;\r\n    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\r\n    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\r\n    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\r\n    out[15] = 1;\r\n    return out;\r\n};\r\nconst multiply$2 = (a, b, out = new Float32Array(16)) => {\r\n    a00$2 = a[0],\r\n        a01$2 = a[1],\r\n        a02$1 = a[2],\r\n        a03 = a[3];\r\n    a10$2 = a[4],\r\n        a11$2 = a[5],\r\n        a12$1 = a[6],\r\n        a13 = a[7];\r\n    a20$1 = a[8],\r\n        a21$1 = a[9],\r\n        a22$1 = a[10],\r\n        a23 = a[11];\r\n    a30 = a[12],\r\n        a31 = a[13],\r\n        a32 = a[14],\r\n        a33 = a[15];\r\n    b00$2 = b[0],\r\n        b01$2 = b[1],\r\n        b02$1 = b[2],\r\n        b03 = b[3];\r\n    out[0] = b00$2 * a00$2 + b01$2 * a10$2 + b02$1 * a20$1 + b03 * a30;\r\n    out[1] = b00$2 * a01$2 + b01$2 * a11$2 + b02$1 * a21$1 + b03 * a31;\r\n    out[2] = b00$2 * a02$1 + b01$2 * a12$1 + b02$1 * a22$1 + b03 * a32;\r\n    out[3] = b00$2 * a03 + b01$2 * a13 + b02$1 * a23 + b03 * a33;\r\n    b00$2 = b[4];\r\n    b01$2 = b[5];\r\n    b02$1 = b[6];\r\n    b03 = b[7];\r\n    out[4] = b00$2 * a00$2 + b01$2 * a10$2 + b02$1 * a20$1 + b03 * a30;\r\n    out[5] = b00$2 * a01$2 + b01$2 * a11$2 + b02$1 * a21$1 + b03 * a31;\r\n    out[6] = b00$2 * a02$1 + b01$2 * a12$1 + b02$1 * a22$1 + b03 * a32;\r\n    out[7] = b00$2 * a03 + b01$2 * a13 + b02$1 * a23 + b03 * a33;\r\n    b00$2 = b[8];\r\n    b01$2 = b[9];\r\n    b02$1 = b[10];\r\n    b03 = b[11];\r\n    out[8] = b00$2 * a00$2 + b01$2 * a10$2 + b02$1 * a20$1 + b03 * a30;\r\n    out[9] = b00$2 * a01$2 + b01$2 * a11$2 + b02$1 * a21$1 + b03 * a31;\r\n    out[10] = b00$2 * a02$1 + b01$2 * a12$1 + b02$1 * a22$1 + b03 * a32;\r\n    out[11] = b00$2 * a03 + b01$2 * a13 + b02$1 * a23 + b03 * a33;\r\n    b00$2 = b[12];\r\n    b01$2 = b[13];\r\n    b02$1 = b[14];\r\n    b03 = b[15];\r\n    out[12] = b00$2 * a00$2 + b01$2 * a10$2 + b02$1 * a20$1 + b03 * a30;\r\n    out[13] = b00$2 * a01$2 + b01$2 * a11$2 + b02$1 * a21$1 + b03 * a31;\r\n    out[14] = b00$2 * a02$1 + b01$2 * a12$1 + b02$1 * a22$1 + b03 * a32;\r\n    out[15] = b00$2 * a03 + b01$2 * a13 + b02$1 * a23 + b03 * a33;\r\n    return out;\r\n};\r\nconst orthogonal = (left, right, bottom, top, near, far, out) => {\r\n    let lr = 1 / (left - right);\r\n    let bt = 1 / (bottom - top);\r\n    let nf = 1 / (near - far);\r\n    out[0] = -2 * lr;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[5] = -2 * bt;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[10] = 2 * nf;\r\n    out[11] = 0;\r\n    out[12] = (left + right) * lr;\r\n    out[13] = (top + bottom) * bt;\r\n    out[14] = (far + near) * nf;\r\n    out[15] = 1;\r\n    return out;\r\n};\r\nconst perspective = (fovy, aspect, near, far, out) => {\r\n    let f = 1.0 / Math.tan(fovy / 2), nf;\r\n    out[0] = f / aspect;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[5] = f;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[11] = -1;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[15] = 0;\r\n    if (far != null && far !== Infinity) {\r\n        nf = 1 / (near - far);\r\n        out[10] = (far + near) * nf;\r\n        out[14] = 2 * far * near * nf;\r\n    }\r\n    else {\r\n        out[10] = -1;\r\n        out[14] = -2 * near;\r\n    }\r\n    return out;\r\n};\r\nconst rotate$2 = (a, rad, axis, out) => {\r\n    x$2 = axis[0];\r\n    y$2 = axis[1];\r\n    z = axis[2];\r\n    len$1 = Math.hypot(x$2, y$2, z);\r\n    if (len$1 < EPSILON) {\r\n        return null;\r\n    }\r\n    len$1 = 1 / len$1;\r\n    x$2 *= len$1;\r\n    y$2 *= len$1;\r\n    z *= len$1;\r\n    s = Math.sin(rad);\r\n    c = Math.cos(rad);\r\n    t = 1 - c;\r\n    a00$2 = a[0];\r\n    a01$2 = a[1];\r\n    a02$1 = a[2];\r\n    a03 = a[3];\r\n    a10$2 = a[4];\r\n    a11$2 = a[5];\r\n    a12$1 = a[6];\r\n    a13 = a[7];\r\n    a20$1 = a[8];\r\n    a21$1 = a[9];\r\n    a22$1 = a[10];\r\n    a23 = a[11];\r\n    b00$2 = x$2 * x$2 * t + c;\r\n    b01$2 = y$2 * x$2 * t + z * s;\r\n    b02$1 = z * x$2 * t - y$2 * s;\r\n    b10$2 = x$2 * y$2 * t - z * s;\r\n    b11$2 = y$2 * y$2 * t + c;\r\n    b12$1 = z * y$2 * t + x$2 * s;\r\n    b20$1 = x$2 * z * t + y$2 * s;\r\n    b21$1 = y$2 * z * t - x$2 * s;\r\n    b22$1 = z * z * t + c;\r\n    out[0] = a00$2 * b00$2 + a10$2 * b01$2 + a20$1 * b02$1;\r\n    out[1] = a01$2 * b00$2 + a11$2 * b01$2 + a21$1 * b02$1;\r\n    out[2] = a02$1 * b00$2 + a12$1 * b01$2 + a22$1 * b02$1;\r\n    out[3] = a03 * b00$2 + a13 * b01$2 + a23 * b02$1;\r\n    out[4] = a00$2 * b10$2 + a10$2 * b11$2 + a20$1 * b12$1;\r\n    out[5] = a01$2 * b10$2 + a11$2 * b11$2 + a21$1 * b12$1;\r\n    out[6] = a02$1 * b10$2 + a12$1 * b11$2 + a22$1 * b12$1;\r\n    out[7] = a03 * b10$2 + a13 * b11$2 + a23 * b12$1;\r\n    out[8] = a00$2 * b20$1 + a10$2 * b21$1 + a20$1 * b22$1;\r\n    out[9] = a01$2 * b20$1 + a11$2 * b21$1 + a21$1 * b22$1;\r\n    out[10] = a02$1 * b20$1 + a12$1 * b21$1 + a22$1 * b22$1;\r\n    out[11] = a03 * b20$1 + a13 * b21$1 + a23 * b22$1;\r\n    if (a !== out) {\r\n        out[12] = a[12];\r\n        out[13] = a[13];\r\n        out[14] = a[14];\r\n        out[15] = a[15];\r\n    }\r\n    return out;\r\n};\r\nconst rotateX = (a, rad, out) => {\r\n    s = Math.sin(rad);\r\n    c = Math.cos(rad);\r\n    a10$2 = a[4];\r\n    a11$2 = a[5];\r\n    a12$1 = a[6];\r\n    a13 = a[7];\r\n    a20$1 = a[8];\r\n    a21$1 = a[9];\r\n    a22$1 = a[10];\r\n    a23 = a[11];\r\n    if (a !== out) {\r\n        out[0] = a[0];\r\n        out[1] = a[1];\r\n        out[2] = a[2];\r\n        out[3] = a[3];\r\n        out[12] = a[12];\r\n        out[13] = a[13];\r\n        out[14] = a[14];\r\n        out[15] = a[15];\r\n    }\r\n    out[4] = a10$2 * c + a20$1 * s;\r\n    out[5] = a11$2 * c + a21$1 * s;\r\n    out[6] = a12$1 * c + a22$1 * s;\r\n    out[7] = a13 * c + a23 * s;\r\n    out[8] = a20$1 * c - a10$2 * s;\r\n    out[9] = a21$1 * c - a11$2 * s;\r\n    out[10] = a22$1 * c - a12$1 * s;\r\n    out[11] = a23 * c - a13 * s;\r\n    return out;\r\n};\r\nfunction rotateY(a, rad, out) {\r\n    s = Math.sin(rad);\r\n    c = Math.cos(rad);\r\n    a00$2 = a[0];\r\n    a01$2 = a[1];\r\n    a02$1 = a[2];\r\n    a03 = a[3];\r\n    a20$1 = a[8];\r\n    a21$1 = a[9];\r\n    a22$1 = a[10];\r\n    a23 = a[11];\r\n    if (a !== out) {\r\n        out[4] = a[4];\r\n        out[5] = a[5];\r\n        out[6] = a[6];\r\n        out[7] = a[7];\r\n        out[12] = a[12];\r\n        out[13] = a[13];\r\n        out[14] = a[14];\r\n        out[15] = a[15];\r\n    }\r\n    out[0] = a00$2 * c - a20$1 * s;\r\n    out[1] = a01$2 * c - a21$1 * s;\r\n    out[2] = a02$1 * c - a22$1 * s;\r\n    out[3] = a03 * c - a23 * s;\r\n    out[8] = a00$2 * s + a20$1 * c;\r\n    out[9] = a01$2 * s + a21$1 * c;\r\n    out[10] = a02$1 * s + a22$1 * c;\r\n    out[11] = a03 * s + a23 * c;\r\n    return out;\r\n}\r\nconst rotateZ = (a, rad, out) => {\r\n    s = Math.sin(rad);\r\n    c = Math.cos(rad);\r\n    a00$2 = a[0];\r\n    a01$2 = a[1];\r\n    a02$1 = a[2];\r\n    a03 = a[3];\r\n    a10$2 = a[4];\r\n    a11$2 = a[5];\r\n    a12$1 = a[6];\r\n    a13 = a[7];\r\n    if (a !== out) {\r\n        out[8] = a[8];\r\n        out[9] = a[9];\r\n        out[10] = a[10];\r\n        out[11] = a[11];\r\n        out[12] = a[12];\r\n        out[13] = a[13];\r\n        out[14] = a[14];\r\n        out[15] = a[15];\r\n    }\r\n    out[0] = a00$2 * c + a10$2 * s;\r\n    out[1] = a01$2 * c + a11$2 * s;\r\n    out[2] = a02$1 * c + a12$1 * s;\r\n    out[3] = a03 * c + a13 * s;\r\n    out[4] = a10$2 * c - a00$2 * s;\r\n    out[5] = a11$2 * c - a01$2 * s;\r\n    out[6] = a12$1 * c - a02$1 * s;\r\n    out[7] = a13 * c - a03 * s;\r\n    return out;\r\n};\r\nconst scale$2 = (a, v, out = new Float32Array(16)) => {\r\n    x$2 = v[0];\r\n    y$2 = v[1];\r\n    z = v[2];\r\n    out[0] = a[0] * x$2;\r\n    out[1] = a[1] * x$2;\r\n    out[2] = a[2] * x$2;\r\n    out[3] = a[3] * x$2;\r\n    out[4] = a[4] * y$2;\r\n    out[5] = a[5] * y$2;\r\n    out[6] = a[6] * y$2;\r\n    out[7] = a[7] * y$2;\r\n    out[8] = a[8] * z;\r\n    out[9] = a[9] * z;\r\n    out[10] = a[10] * z;\r\n    out[11] = a[11] * z;\r\n    if (out !== a) {\r\n        out[12] = a[12];\r\n        out[13] = a[13];\r\n        out[14] = a[14];\r\n        out[15] = a[15];\r\n    }\r\n    return out;\r\n};\r\nconst targetTo = (eye, target, up, out = new Float32Array(16)) => {\r\n    let eyex = eye[0], eyey = eye[1], eyez = eye[2], upx = up[0], upy = up[1], upz = up[2];\r\n    let z0 = eyex - target[0], z1 = eyey - target[1], z2 = eyez - target[2];\r\n    let len = z0 * z0 + z1 * z1 + z2 * z2;\r\n    if (len > 0) {\r\n        len = 1 / Math.sqrt(len);\r\n        z0 *= len;\r\n        z1 *= len;\r\n        z2 *= len;\r\n    }\r\n    let x0 = upy * z2 - upz * z1, x1 = upz * z0 - upx * z2, x2 = upx * z1 - upy * z0;\r\n    len = x0 * x0 + x1 * x1 + x2 * x2;\r\n    if (len > 0) {\r\n        len = 1 / Math.sqrt(len);\r\n        x0 *= len;\r\n        x1 *= len;\r\n        x2 *= len;\r\n    }\r\n    out[0] = x0;\r\n    out[1] = x1;\r\n    out[2] = x2;\r\n    out[3] = 0;\r\n    out[4] = z1 * x2 - z2 * x1;\r\n    out[5] = z2 * x0 - z0 * x2;\r\n    out[6] = z0 * x1 - z1 * x0;\r\n    out[7] = 0;\r\n    out[8] = z0;\r\n    out[9] = z1;\r\n    out[10] = z2;\r\n    out[11] = 0;\r\n    out[12] = eyex;\r\n    out[13] = eyey;\r\n    out[14] = eyez;\r\n    out[15] = 1;\r\n    return out;\r\n};\r\nconst translate$1 = (a, v, out = new Float32Array(16)) => {\r\n    x$2 = v[0];\r\n    y$2 = v[1];\r\n    z = v[2];\r\n    if (a === out) {\r\n        out[12] = a[0] * x$2 + a[4] * y$2 + a[8] * z + a[12];\r\n        out[13] = a[1] * x$2 + a[5] * y$2 + a[9] * z + a[13];\r\n        out[14] = a[2] * x$2 + a[6] * y$2 + a[10] * z + a[14];\r\n        out[15] = a[3] * x$2 + a[7] * y$2 + a[11] * z + a[15];\r\n    }\r\n    else {\r\n        a00$2 = a[0];\r\n        a01$2 = a[1];\r\n        a02$1 = a[2];\r\n        a03 = a[3];\r\n        a10$2 = a[4];\r\n        a11$2 = a[5];\r\n        a12$1 = a[6];\r\n        a13 = a[7];\r\n        a20$1 = a[8];\r\n        a21$1 = a[9];\r\n        a22$1 = a[10];\r\n        a23 = a[11];\r\n        out[0] = a00$2;\r\n        out[1] = a01$2;\r\n        out[2] = a02$1;\r\n        out[3] = a03;\r\n        out[4] = a10$2;\r\n        out[5] = a11$2;\r\n        out[6] = a12$1;\r\n        out[7] = a13;\r\n        out[8] = a20$1;\r\n        out[9] = a21$1;\r\n        out[10] = a22$1;\r\n        out[11] = a23;\r\n        out[12] = a00$2 * x$2 + a10$2 * y$2 + a20$1 * z + a[12];\r\n        out[13] = a01$2 * x$2 + a11$2 * y$2 + a21$1 * z + a[13];\r\n        out[14] = a02$1 * x$2 + a12$1 * y$2 + a22$1 * z + a[14];\r\n        out[15] = a03 * x$2 + a13 * y$2 + a23 * z + a[15];\r\n    }\r\n    return out;\r\n};\r\nconst transpose$2 = (a, out = new Float32Array(16)) => {\r\n    if (out === a) {\r\n        a01$2 = a[1],\r\n            a02$1 = a[2],\r\n            a03 = a[3];\r\n        a12$1 = a[6],\r\n            a13 = a[7];\r\n        a23 = a[11];\r\n        out[1] = a[4];\r\n        out[2] = a[8];\r\n        out[3] = a[12];\r\n        out[4] = a01$2;\r\n        out[6] = a[9];\r\n        out[7] = a[13];\r\n        out[8] = a02$1;\r\n        out[9] = a12$1;\r\n        out[11] = a[14];\r\n        out[12] = a03;\r\n        out[13] = a13;\r\n        out[14] = a23;\r\n    }\r\n    else {\r\n        out[0] = a[0];\r\n        out[1] = a[4];\r\n        out[2] = a[8];\r\n        out[3] = a[12];\r\n        out[4] = a[1];\r\n        out[5] = a[5];\r\n        out[6] = a[9];\r\n        out[7] = a[13];\r\n        out[8] = a[2];\r\n        out[9] = a[6];\r\n        out[10] = a[10];\r\n        out[11] = a[14];\r\n        out[12] = a[3];\r\n        out[13] = a[7];\r\n        out[14] = a[11];\r\n        out[15] = a[15];\r\n    }\r\n    return out;\r\n};\n\nvar Matrix4 = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tUNIT_MATRIX4: UNIT_MATRIX4,\n\tcreate: create$3,\n\tdeterminant: determinant$2,\n\tfrom: from$2,\n\tfromEuler: fromEuler,\n\tfromQuaternion: fromQuaternion,\n\tfromRotation: fromRotation$2,\n\tfromRotationX: fromRotationX,\n\tfromRotationY: fromRotationY,\n\tfromRotationZ: fromRotationZ,\n\tfromScaling: fromScaling$2,\n\tfromTranslation: fromTranslation$1,\n\tidentity: identity$2,\n\tinvert: invert$2,\n\tlookAt: lookAt,\n\tmultiply: multiply$2,\n\torthogonal: orthogonal,\n\tperspective: perspective,\n\trotate: rotate$2,\n\trotateX: rotateX,\n\trotateY: rotateY,\n\trotateZ: rotateZ,\n\tscale: scale$2,\n\ttargetTo: targetTo,\n\ttranslate: translate$1,\n\ttranspose: transpose$2\n});\n\nlet ax, ay, az, bx, by, bz;\r\nlet ag, s$1;\r\nconst add$1 = (a, b, out = new Float32Array(3)) => {\r\n    out[0] = a[0] + b[0];\r\n    out[1] = a[1] + b[1];\r\n    out[2] = a[2] + b[2];\r\n    return out;\r\n};\r\nconst addScalar = (a, b, out = new Float32Array(3)) => {\r\n    out[0] = a[0] + b;\r\n    out[1] = a[1] + b;\r\n    out[2] = a[2] + b;\r\n    return out;\r\n};\r\nconst angle = (a, b) => {\r\n    ax = a[0],\r\n        ay = a[1],\r\n        az = a[2],\r\n        bx = b[0],\r\n        by = b[1],\r\n        bz = b[2];\r\n    let mag1 = Math.sqrt(ax * ax + ay * ay + az * az), mag2 = Math.sqrt(bx * bx + by * by + bz * bz), mag = mag1 * mag2, cosine = mag && dot(a, b) / mag;\r\n    return Math.acos(clampCommon(cosine, -1, 1));\r\n};\r\nconst clamp = (a, min, max, out = new Float32Array(3)) => {\r\n    out[0] = clampCommon(a[0], min[0], max[0]);\r\n    out[1] = clampCommon(a[1], min[1], max[1]);\r\n    out[2] = clampCommon(a[2], min[2], max[2]);\r\n    return out;\r\n};\r\nconst clampSafe = (a, min, max, out = new Float32Array(3)) => {\r\n    out[0] = clampSafeCommon(a[0], min[0], max[0]);\r\n    out[1] = clampSafeCommon(a[1], min[1], max[1]);\r\n    out[1] = clampSafeCommon(a[2], min[2], max[2]);\r\n    return out;\r\n};\r\nconst clampScalar = (a, min, max, out = new Float32Array(3)) => {\r\n    out[0] = clampCommon(a[0], min, max);\r\n    out[1] = clampCommon(a[1], min, max);\r\n    out[2] = clampCommon(a[2], min, max);\r\n    return out;\r\n};\r\nconst clone = (a, out = new Float32Array(3)) => {\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    return out;\r\n};\r\nconst closeTo$1 = (a, b) => {\r\n    return closeToCommon(a[0], b[0]) && closeToCommon(a[1], b[1]) && closeToCommon(a[2], b[2]);\r\n};\r\nconst create$4 = (x, y = 0, z, out = new Float32Array(3)) => {\r\n    out[0] = x;\r\n    out[1] = y;\r\n    out[2] = z;\r\n    return out;\r\n};\r\nconst cross = (a, b, out = new Float32Array(3)) => {\r\n    ax = a[0], ay = a[1], az = a[2];\r\n    bx = b[0], by = b[1], bz = b[2];\r\n    out[0] = ay * bz - az * by;\r\n    out[1] = az * bx - ax * bz;\r\n    out[2] = ax * by - ay * bx;\r\n    return out;\r\n};\r\nconst distanceTo = (a, b) => {\r\n    ax = b[0] - a[0];\r\n    ay = b[1] - a[1];\r\n    az = b[2] - a[2];\r\n    return Math.hypot(ax, ay, az);\r\n};\r\nconst distanceToManhattan = (a, b) => {\r\n    return Math.abs(a[0] - b[0]) + Math.abs(a[1] - b[1]) + Math.abs(a[2] - b[2]);\r\n};\r\nconst distanceToSquared = (a, b) => {\r\n    ax = a[0] - b[0];\r\n    ay = a[1] - b[1];\r\n    az = a[2] - b[2];\r\n    return ax * ax + ay * ay + az * az;\r\n};\r\nconst divide = (a, b, out = new Float32Array(3)) => {\r\n    out[0] = a[0] / b[0];\r\n    out[1] = a[1] / b[1];\r\n    out[2] = a[2] / b[2];\r\n    return out;\r\n};\r\nconst divideScalar = (a, b, out = new Float32Array(3)) => {\r\n    out[0] = a[0] / b;\r\n    out[1] = a[1] / b;\r\n    out[2] = a[2] / b;\r\n    return out;\r\n};\r\nconst dot = (a, b) => {\r\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r\n};\r\nconst equals$1 = (a, b) => {\r\n    return ((a[0] === b[0]) && (a[1] === b[1]) && (a[2] === b[2]));\r\n};\r\nconst from$3 = (a, out = new Float32Array(3)) => {\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    return out;\r\n};\r\nconst fromArray = (a, offset = 0, out = new Float32Array(3)) => {\r\n    out[0] = a[offset];\r\n    out[1] = a[offset + 1];\r\n    out[2] = a[offset + 2];\r\n    return out;\r\n};\r\nconst fromScalar$1 = (num, out = new Float32Array(3)) => {\r\n    out[0] = out[1] = out[2] = num;\r\n    return out;\r\n};\r\nconst fromValues = (x, y, z, out = new Float32Array(3)) => {\r\n    out[0] = x;\r\n    out[1] = y;\r\n    out[2] = z;\r\n    return out;\r\n};\r\nconst hermite = (a, b, c, d, t, out = new Float32Array(3)) => {\r\n    ag = t * t;\r\n    let factor1 = ag * (2 * t - 3) + 1;\r\n    let factor2 = ag * (t - 2) + t;\r\n    let factor3 = ag * (t - 1);\r\n    let factor4 = ag * (3 - 2 * t);\r\n    out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n    out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n    out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n    return out;\r\n};\r\nconst inverse = (a, out = new Float32Array(3)) => {\r\n    out[0] = 1.0 / a[0];\r\n    out[1] = 1.0 / a[1];\r\n    out[2] = 1.0 / a[2];\r\n    return out;\r\n};\r\nconst length = (a) => {\r\n    return Math.sqrt(lengthSquared(a));\r\n};\r\nconst lengthManhattan = (a) => {\r\n    return Math.abs(a[0]) + Math.abs(a[1]) + Math.abs(a[2]);\r\n};\r\nconst lengthSquared = (a) => {\r\n    return a[0] * a[0] + a[1] * a[1] + a[2] * a[2];\r\n};\r\nconst lerp = (a, b, alpha, out = new Float32Array(3)) => {\r\n    out[0] += (b[0] - a[0]) * alpha;\r\n    out[1] += (b[1] - a[1]) * alpha;\r\n    out[2] += (b[2] - a[2]) * alpha;\r\n    return out;\r\n};\r\nconst max = (a, b, out = new Float32Array(3)) => {\r\n    out[0] = Math.max(a[0], b[0]);\r\n    out[1] = Math.max(a[1], b[1]);\r\n    out[2] = Math.max(a[2], b[2]);\r\n    return out;\r\n};\r\nconst min = (a, b, out = new Float32Array(3)) => {\r\n    out[0] = Math.min(a[0], b[0]);\r\n    out[1] = Math.min(a[1], b[1]);\r\n    out[2] = Math.min(a[2], b[2]);\r\n    return out;\r\n};\r\nconst minus$1 = (a, b, out = new Float32Array(3)) => {\r\n    out[0] = a[0] - b[0];\r\n    out[1] = a[1] - b[1];\r\n    out[2] = a[2] - b[2];\r\n    return out;\r\n};\r\nconst minusScalar = (a, b, out = new Float32Array(3)) => {\r\n    out[0] = a[0] - b;\r\n    out[1] = a[1] - b;\r\n    out[2] = a[2] - b;\r\n    return out;\r\n};\r\nconst multiply$3 = (a, b, out = new Float32Array(3)) => {\r\n    out[0] = a[0] * b[0];\r\n    out[1] = a[1] * b[1];\r\n    out[2] = a[2] * b[2];\r\n    return out;\r\n};\r\nconst multiplyScalar$1 = (a, scalar, out = new Float32Array(3)) => {\r\n    out[0] = a[0] * scalar;\r\n    out[1] = a[1] * scalar;\r\n    out[2] = a[2] * scalar;\r\n    return out;\r\n};\r\nconst negate = (a, out = new Float32Array(3)) => {\r\n    out[0] = -a[0];\r\n    out[1] = -a[1];\r\n    out[2] = -a[2];\r\n    return out;\r\n};\r\nconst normalize = (a, out = new Float32Array(3)) => {\r\n    return divideScalar(a, length(a) || 1, out);\r\n};\r\nconst rotateX$1 = (a, b, rad, out) => {\r\n    ax = a[0] - b[0];\r\n    ay = a[1] - b[1];\r\n    az = a[2] - b[2];\r\n    bx = ax;\r\n    by = ay * Math.cos(rad) - az * Math.sin(rad);\r\n    bz = ay * Math.sin(rad) + az * Math.cos(rad);\r\n    out[0] = bx + b[0];\r\n    out[1] = by + b[1];\r\n    out[2] = bz + b[2];\r\n    return out;\r\n};\r\nconst rotateY$1 = (a, b, rad, out) => {\r\n    ax = a[0] - b[0];\r\n    ay = a[1] - b[1];\r\n    az = a[2] - b[2];\r\n    bx = az * Math.sin(rad) + ax * Math.cos(rad);\r\n    by = ay;\r\n    bz = az * Math.cos(rad) - ax * Math.sin(rad);\r\n    out[0] = bx + b[0];\r\n    out[1] = by + b[1];\r\n    out[2] = bz + b[2];\r\n    return out;\r\n};\r\nconst rotateZ$1 = (a, b, rad, out) => {\r\n    ax = a[0] - b[0];\r\n    ay = a[1] - b[1];\r\n    az = a[2] - b[2];\r\n    bx = ax * Math.cos(rad) - ay * Math.sin(rad);\r\n    by = ax * Math.sin(rad) + ay * Math.cos(rad);\r\n    bz = az;\r\n    out[0] = bx + b[0];\r\n    out[1] = by + b[1];\r\n    out[2] = bz + b[2];\r\n    return out;\r\n};\r\nconst round = (a, out = new Float32Array(3)) => {\r\n    out[0] = Math.round(a[0]);\r\n    out[1] = Math.round(a[1]);\r\n    out[2] = Math.round(a[2]);\r\n    return out;\r\n};\r\nconst set = (x = 0, y = 0, z = 0, out = new Float32Array(3)) => {\r\n    out[0] = x;\r\n    out[1] = y;\r\n    out[2] = z;\r\n    return out;\r\n};\r\nconst setLength = (a, len, out = new Float32Array(3)) => {\r\n    return multiplyScalar$1(normalize(a, out), len, out);\r\n};\r\nconst slerp = (a, b, t, out = new Float32Array(3)) => {\r\n    ag = Math.acos(Math.min(Math.max(dot(a, b), -1), 1));\r\n    s$1 = Math.sin(ag);\r\n    ax = Math.sin((1 - t) * ag) / s$1;\r\n    bx = Math.sin(t * ag) / s$1;\r\n    out[0] = ax * a[0] + bx * b[0];\r\n    out[1] = ax * a[1] + bx * b[1];\r\n    out[2] = ax * a[2] + bx * b[2];\r\n    return out;\r\n};\r\nconst toString$1 = (a) => {\r\n    return `vec3(${a[0]}, ${a[1]}, ${a[2]})`;\r\n};\r\nconst transformMatrix3 = (a, m, out) => {\r\n    ax = a[0],\r\n        ay = a[1],\r\n        az = a[2];\r\n    out[0] = ax * m[0] + ay * m[3] + az * m[6];\r\n    out[1] = ax * m[1] + ay * m[4] + az * m[7];\r\n    out[2] = ax * m[2] + ay * m[5] + az * m[8];\r\n    return out;\r\n};\r\nfunction transformMatrix4(a, m, out = new Float32Array(3)) {\r\n    ax = a[0],\r\n        ay = a[1],\r\n        az = a[2];\r\n    ag = m[3] * ax + m[7] * ay + m[11] * az + m[15];\r\n    ag = ag || 1.0;\r\n    out[0] = (m[0] * ax + m[4] * ay + m[8] * az + m[12]) / ag;\r\n    out[1] = (m[1] * ax + m[5] * ay + m[9] * az + m[13]) / ag;\r\n    out[2] = (m[2] * ax + m[6] * ay + m[10] * az + m[14]) / ag;\r\n    return out;\r\n}\r\nconst transformQuat = (a, q, out = new Float32Array(3)) => {\r\n    let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\r\n    let x = a[0], y = a[1], z = a[2];\r\n    // var qvec = [qx, qy, qz];\r\n    // var uv = vec3.cross([], qvec, a);\r\n    let uvx = qy * z - qz * y, uvy = qz * x - qx * z, uvz = qx * y - qy * x;\r\n    // var uuv = vec3.cross([], qvec, uv);\r\n    let uuvx = qy * uvz - qz * uvy, uuvy = qz * uvx - qx * uvz, uuvz = qx * uvy - qy * uvx;\r\n    // vec3.scale(uv, uv, 2 * w);\r\n    let w2 = qw * 2;\r\n    uvx *= w2;\r\n    uvy *= w2;\r\n    uvz *= w2;\r\n    // vec3.scale(uuv, uuv, 2);\r\n    uuvx *= 2;\r\n    uuvy *= 2;\r\n    uuvz *= 2;\r\n    // return vec3.add(out, a, vec3.add(out, uv, uuv));\r\n    out[0] = x + uvx + uuvx;\r\n    out[1] = y + uvy + uuvy;\r\n    out[2] = z + uvz + uuvz;\r\n    return out;\r\n};\r\nconst VECTOR3_ZERO = new Float32Array([0, 0, 0]);\r\nconst VECTOR3_ONE = new Float32Array([1, 1, 1]);\r\nconst VECTOR3_TOP = new Float32Array([0, 1, 0]);\r\nconst VECTOR3_BOTTOM = new Float32Array([0, -1, 0]);\r\nconst VECTOR3_LEFT = new Float32Array([-1, 0, 0]);\r\nconst VECTOR3_RIGHT = new Float32Array([1, 0, 0]);\r\nconst VECTOR3_FRONT = new Float32Array([0, 0, -1]);\r\nconst VECTOR3_BACK = new Float32Array([0, 0, 1]);\n\nvar Vector3 = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tadd: add$1,\n\taddScalar: addScalar,\n\tangle: angle,\n\tclamp: clamp,\n\tclampSafe: clampSafe,\n\tclampScalar: clampScalar,\n\tclone: clone,\n\tcloseTo: closeTo$1,\n\tcreate: create$4,\n\tcross: cross,\n\tdistanceTo: distanceTo,\n\tdistanceToManhattan: distanceToManhattan,\n\tdistanceToSquared: distanceToSquared,\n\tdivide: divide,\n\tdivideScalar: divideScalar,\n\tdot: dot,\n\tequals: equals$1,\n\tfrom: from$3,\n\tfromArray: fromArray,\n\tfromScalar: fromScalar$1,\n\tfromValues: fromValues,\n\thermite: hermite,\n\tinverse: inverse,\n\tlength: length,\n\tlengthManhattan: lengthManhattan,\n\tlengthSquared: lengthSquared,\n\tlerp: lerp,\n\tmax: max,\n\tmin: min,\n\tminus: minus$1,\n\tminusScalar: minusScalar,\n\tmultiply: multiply$3,\n\tmultiplyScalar: multiplyScalar$1,\n\tnegate: negate,\n\tnormalize: normalize,\n\trotateX: rotateX$1,\n\trotateY: rotateY$1,\n\trotateZ: rotateZ$1,\n\tround: round,\n\tset: set,\n\tsetLength: setLength,\n\tslerp: slerp,\n\ttoString: toString$1,\n\ttransformMatrix3: transformMatrix3,\n\ttransformMatrix4: transformMatrix4,\n\ttransformQuat: transformQuat,\n\tVECTOR3_ZERO: VECTOR3_ZERO,\n\tVECTOR3_ONE: VECTOR3_ONE,\n\tVECTOR3_TOP: VECTOR3_TOP,\n\tVECTOR3_BOTTOM: VECTOR3_BOTTOM,\n\tVECTOR3_LEFT: VECTOR3_LEFT,\n\tVECTOR3_RIGHT: VECTOR3_RIGHT,\n\tVECTOR3_FRONT: VECTOR3_FRONT,\n\tVECTOR3_BACK: VECTOR3_BACK\n});\n\n// import clampCommon from \"../common/clamp\";\r\nlet ax$1, ay$1, az$1, aw, bx$1, by$1, bz$1, len$2;\r\nlet ix, iy, iz, iw;\r\nlet A, B, C, D, E, F, G, H, I, J;\r\nconst add$2 = (a, b, out = new Float32Array(4)) => {\r\n    out[0] = a[0] + b[0];\r\n    out[1] = a[1] + b[1];\r\n    out[2] = a[2] + b[2];\r\n    out[3] = a[3] + b[3];\r\n    return out;\r\n};\r\nfunction ceil(a, out = new Float32Array(4)) {\r\n    out[0] = Math.ceil(a[0]);\r\n    out[1] = Math.ceil(a[1]);\r\n    out[2] = Math.ceil(a[2]);\r\n    out[3] = Math.ceil(a[3]);\r\n    return out;\r\n}\r\nconst closeTo$2 = (a, b) => {\r\n    return closeToCommon(a[0], b[0]) && closeToCommon(a[1], b[1]) && closeToCommon(a[2], b[2]) && closeToCommon(a[3], b[3]);\r\n};\r\nconst create$5 = (x = 0, y = 0, z = 0, w = 0, out = new Float32Array(4)) => {\r\n    out[0] = x;\r\n    out[1] = y;\r\n    out[2] = z;\r\n    out[3] = w;\r\n    return out;\r\n};\r\nconst cross$1 = (u, v, w, out = new Float32Array(4)) => {\r\n    A = v[0] * w[1] - v[1] * w[0],\r\n        B = v[0] * w[2] - v[2] * w[0],\r\n        C = v[0] * w[3] - v[3] * w[0],\r\n        D = v[1] * w[2] - v[2] * w[1],\r\n        E = v[1] * w[3] - v[3] * w[1],\r\n        F = v[2] * w[3] - v[3] * w[2];\r\n    G = u[0];\r\n    H = u[1];\r\n    I = u[2];\r\n    J = u[3];\r\n    out[0] = H * F - I * E + J * D;\r\n    out[1] = -(G * F) + I * C - J * B;\r\n    out[2] = G * E - H * C + J * A;\r\n    out[3] = -(G * D) + H * B - I * A;\r\n    return out;\r\n};\r\nconst distanceTo$1 = (a, b) => {\r\n    ax$1 = b[0] - a[0];\r\n    ay$1 = b[1] - a[1];\r\n    az$1 = b[2] - a[2];\r\n    aw = b[3] - a[3];\r\n    return Math.hypot(ax$1, ay$1, az$1, aw);\r\n};\r\nconst distanceToSquared$1 = (a, b) => {\r\n    ax$1 = b[0] - a[0];\r\n    ay$1 = b[1] - a[1];\r\n    az$1 = b[2] - a[2];\r\n    aw = b[3] - a[3];\r\n    return ax$1 * ax$1 + ay$1 * ay$1 + az$1 * az$1 + aw * aw;\r\n};\r\nconst divide$1 = (a, b, out = new Float32Array(4)) => {\r\n    out[0] = a[0] / b[0];\r\n    out[1] = a[1] / b[1];\r\n    out[2] = a[2] / b[2];\r\n    out[3] = a[3] / b[3];\r\n    return out;\r\n};\r\nconst dot$1 = (a, b) => {\r\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\r\n};\r\nconst equals$2 = (a, b) => {\r\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\r\n};\r\nfunction floor(a, out) {\r\n    out[0] = Math.floor(a[0]);\r\n    out[1] = Math.floor(a[1]);\r\n    out[2] = Math.floor(a[2]);\r\n    out[3] = Math.floor(a[3]);\r\n    return out;\r\n}\r\nconst from$4 = (a, out = new Float32Array(4)) => {\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[3];\r\n    return out;\r\n};\r\nconst fromValues$1 = (x, y, z, w, out = new Float32Array(4)) => {\r\n    out[0] = x;\r\n    out[1] = y;\r\n    out[2] = z;\r\n    out[3] = w;\r\n    return out;\r\n};\r\nconst inverse$1 = (a, out = new Float32Array(4)) => {\r\n    out[0] = 1.0 / a[0];\r\n    out[1] = 1.0 / a[1];\r\n    out[2] = 1.0 / a[2];\r\n    out[3] = 1.0 / a[3];\r\n    return out;\r\n};\r\nconst length$1 = (a) => {\r\n    return Math.hypot(a[0], a[1], a[2], a[3]);\r\n};\r\nconst lengthSquared$1 = (a) => {\r\n    ax$1 = a[0];\r\n    ay$1 = a[1];\r\n    az$1 = a[2];\r\n    aw = a[3];\r\n    return ax$1 * ax$1 + ay$1 * ay$1 + az$1 * az$1 + aw * aw;\r\n};\r\nconst lerp$1 = (a, b, t, out = new Float32Array(4)) => {\r\n    ax$1 = a[0];\r\n    ay$1 = a[1];\r\n    az$1 = a[2];\r\n    aw = a[3];\r\n    out[0] = ax$1 + t * (b[0] - ax$1);\r\n    out[1] = ay$1 + t * (b[1] - ay$1);\r\n    out[2] = az$1 + t * (b[2] - az$1);\r\n    out[3] = aw + t * (b[3] - aw);\r\n    return out;\r\n};\r\nconst max$1 = (a, b, out = new Float32Array(4)) => {\r\n    out[0] = Math.max(a[0], b[0]);\r\n    out[1] = Math.max(a[1], b[1]);\r\n    out[2] = Math.max(a[2], b[2]);\r\n    out[3] = Math.max(a[3], b[3]);\r\n    return out;\r\n};\r\nconst min$1 = (a, b, out = new Float32Array(4)) => {\r\n    out[0] = Math.min(a[0], b[0]);\r\n    out[1] = Math.min(a[1], b[1]);\r\n    out[2] = Math.min(a[2], b[2]);\r\n    out[3] = Math.min(a[3], b[3]);\r\n    return out;\r\n};\r\nconst minus$2 = (a, b, out = new Float32Array(4)) => {\r\n    out[0] = a[0] - b[0];\r\n    out[1] = a[1] - b[1];\r\n    out[2] = a[2] - b[2];\r\n    out[3] = a[3] - b[3];\r\n    return out;\r\n};\r\nconst multiply$4 = (a, b, out = new Float32Array(4)) => {\r\n    out[0] = a[0] * b[0];\r\n    out[1] = a[1] * b[1];\r\n    out[2] = a[2] * b[2];\r\n    out[3] = a[3] * b[3];\r\n    return out;\r\n};\r\nconst multiplyScalar$2 = (a, b, out = new Float32Array(4)) => {\r\n    out[0] = a[0] * b;\r\n    out[1] = a[1] * b;\r\n    out[2] = a[2] * b;\r\n    out[3] = a[3] * b;\r\n    return out;\r\n};\r\nconst negate$1 = (a, out = new Float32Array(4)) => {\r\n    out[0] = -a[0];\r\n    out[1] = -a[1];\r\n    out[2] = -a[2];\r\n    out[3] = -a[3];\r\n    return out;\r\n};\r\nconst normalize$1 = (a, out = new Float32Array(4)) => {\r\n    ax$1 = a[0];\r\n    ay$1 = a[1];\r\n    az$1 = a[2];\r\n    aw = a[3];\r\n    len$2 = ax$1 * ax$1 + ay$1 * ay$1 + az$1 * az$1 + aw * aw;\r\n    if (len$2 > 0) {\r\n        len$2 = 1 / Math.sqrt(len$2);\r\n    }\r\n    out[0] = ax$1 * len$2;\r\n    out[1] = ay$1 * len$2;\r\n    out[2] = az$1 * len$2;\r\n    out[3] = aw * len$2;\r\n    return out;\r\n};\r\nconst round$1 = (a, out = new Float32Array(4)) => {\r\n    out[0] = Math.round(a[0]);\r\n    out[1] = Math.round(a[1]);\r\n    out[2] = Math.round(a[2]);\r\n    out[3] = Math.round(a[3]);\r\n    return out;\r\n};\r\nfunction toString$2(a) {\r\n    return `vec4(${a[0]}, ${a[1]}, ${a[2]}, ${a[3]})`;\r\n}\r\nfunction transformMatrix4$1(a, m, out = new Float32Array(4)) {\r\n    ax$1 = a[0],\r\n        ay$1 = a[1],\r\n        az$1 = a[2],\r\n        aw = a[3];\r\n    out[0] = m[0] * ax$1 + m[4] * ay$1 + m[8] * az$1 + m[12] * aw;\r\n    out[1] = m[1] * ax$1 + m[5] * ay$1 + m[9] * az$1 + m[13] * aw;\r\n    out[2] = m[2] * ax$1 + m[6] * ay$1 + m[10] * az$1 + m[14] * aw;\r\n    out[3] = m[3] * ax$1 + m[7] * ay$1 + m[11] * az$1 + m[15] * aw;\r\n    return out;\r\n}\r\nconst transformQuat$1 = (a, q, out = new Float32Array(4)) => {\r\n    bx$1 = a[0],\r\n        by$1 = a[1],\r\n        bz$1 = a[2];\r\n    ax$1 = q[0],\r\n        ay$1 = q[1],\r\n        az$1 = q[2],\r\n        aw = q[3];\r\n    ix = aw * bx$1 + ay$1 * bz$1 - az$1 * by$1;\r\n    iy = aw * by$1 + az$1 * bx$1 - ax$1 * bz$1;\r\n    iz = aw * bz$1 + ax$1 * by$1 - ay$1 * bx$1;\r\n    iw = -ax$1 * bx$1 - ay$1 * by$1 - az$1 * bz$1;\r\n    out[0] = ix * aw + iw * -ax$1 + iy * -az$1 - iz * -ay$1;\r\n    out[1] = iy * aw + iw * -ay$1 + iz * -ax$1 - ix * -az$1;\r\n    out[2] = iz * aw + iw * -az$1 + ix * -ay$1 - iy * -ax$1;\r\n    out[3] = a[3];\r\n    return out;\r\n};\n\nvar Vector4 = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tadd: add$2,\n\tceil: ceil,\n\tcloseTo: closeTo$2,\n\tcreate: create$5,\n\tcross: cross$1,\n\tdistanceTo: distanceTo$1,\n\tdistanceToSquared: distanceToSquared$1,\n\tdivide: divide$1,\n\tdot: dot$1,\n\tequals: equals$2,\n\tfloor: floor,\n\tfrom: from$4,\n\tfromValues: fromValues$1,\n\tinverse: inverse$1,\n\tlength: length$1,\n\tlengthSquared: lengthSquared$1,\n\tlerp: lerp$1,\n\tmax: max$1,\n\tmin: min$1,\n\tminus: minus$2,\n\tmultiply: multiply$4,\n\tmultiplyScalar: multiplyScalar$2,\n\tnegate: negate$1,\n\tnormalize: normalize$1,\n\tround: round$1,\n\ttoString: toString$2,\n\ttransformMatrix4: transformMatrix4$1,\n\ttransformQuat: transformQuat$1\n});\n\nlet ax$2, ay$2, az$2, aw$1, bx$2, by$2, bz$2, bw;\r\nlet s$2 = 0, c$1 = 0, rad = 0, dotTmp = 0, omega = 0, scale0 = 0, scale1 = 0;\r\nlet tmpVec3 = new Float32Array(3);\r\nconst angleTo = (a, b) => {\r\n    dotTmp = dot$2(a, b);\r\n    return Math.acos(2 * dotTmp * dotTmp - 1);\r\n};\r\nconst conjugate = (a, out = new Float32Array(4)) => {\r\n    out[0] = -a[0];\r\n    out[1] = -a[1];\r\n    out[2] = -a[2];\r\n    out[3] = a[3];\r\n    return out;\r\n};\r\nconst create$6 = (x = 0, y = 0, z = 0, w = 1, out = new Float32Array(4)) => {\r\n    out[0] = x;\r\n    out[1] = y;\r\n    out[2] = z;\r\n    out[3] = w;\r\n    return out;\r\n};\r\nconst dot$2 = dot$1;\r\nconst fromAxisAngle = (axis, rad, out = new Float32Array(4)) => {\r\n    rad = rad * 0.5;\r\n    s$2 = Math.sin(rad);\r\n    out[0] = s$2 * axis[0];\r\n    out[1] = s$2 * axis[1];\r\n    out[2] = s$2 * axis[2];\r\n    out[3] = Math.cos(rad);\r\n    return out;\r\n};\r\nfunction fromMatrix3(m, out) {\r\n    let fTrace = m[0] + m[4] + m[8];\r\n    let fRoot;\r\n    if (fTrace > 0.0) {\r\n        fRoot = Math.sqrt(fTrace + 1.0); // 2w\r\n        out[3] = 0.5 * fRoot;\r\n        fRoot = 0.5 / fRoot; // 1/(4w)\r\n        out[0] = (m[5] - m[7]) * fRoot;\r\n        out[1] = (m[6] - m[2]) * fRoot;\r\n        out[2] = (m[1] - m[3]) * fRoot;\r\n    }\r\n    else {\r\n        let i = 0;\r\n        if (m[4] > m[0])\r\n            i = 1;\r\n        if (m[8] > m[i * 3 + i])\r\n            i = 2;\r\n        let j = (i + 1) % 3;\r\n        let k = (i + 2) % 3;\r\n        fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\r\n        out[i] = 0.5 * fRoot;\r\n        fRoot = 0.5 / fRoot;\r\n        out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\r\n        out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\r\n        out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\r\n    }\r\n    return out;\r\n}\r\nconst identity$3 = (out = new Float32Array(4)) => {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 1;\r\n    return out;\r\n};\r\nconst invert$3 = (a, out = new Float32Array(4)) => {\r\n    ax$2 = a[0],\r\n        ay$2 = a[1],\r\n        az$2 = a[2],\r\n        aw$1 = a[3];\r\n    dotTmp = ax$2 * ax$2 + ay$2 * ay$2 + az$2 * az$2 + aw$1 * aw$1;\r\n    if (dotTmp) {\r\n        c$1 = 1.0 / dotTmp;\r\n        out[0] = -ax$2 * c$1;\r\n        out[1] = -ay$2 * c$1;\r\n        out[2] = -az$2 * c$1;\r\n        out[3] = aw$1 * c$1;\r\n    }\r\n    else {\r\n        out[0] = 0;\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n        out[3] = 0;\r\n    }\r\n    return out;\r\n};\r\nconst lerp$2 = lerp$1;\r\nconst multiply$5 = (a, b, out) => {\r\n    ax$2 = a[0],\r\n        ay$2 = a[1],\r\n        az$2 = a[2],\r\n        aw$1 = a[3];\r\n    bx$2 = b[0],\r\n        by$2 = b[1],\r\n        bz$2 = b[2],\r\n        bw = b[3];\r\n    out[0] = ax$2 * bw + aw$1 * bx$2 + ay$2 * bz$2 - az$2 * by$2;\r\n    out[1] = ay$2 * bw + aw$1 * by$2 + az$2 * bx$2 - ax$2 * bz$2;\r\n    out[2] = az$2 * bw + aw$1 * bz$2 + ax$2 * by$2 - ay$2 * bx$2;\r\n    out[3] = aw$1 * bw - ax$2 * bx$2 - ay$2 * by$2 - az$2 * bz$2;\r\n    return out;\r\n};\r\nconst random = (out) => {\r\n    ax$2 = Math.random();\r\n    ay$2 = Math.random();\r\n    az$2 = Math.random();\r\n    c$1 = Math.sqrt(1 - ax$2);\r\n    s$2 = Math.sqrt(ax$2);\r\n    out[0] = c$1 * Math.sin(2.0 * Math.PI * ay$2);\r\n    out[1] = c$1 * Math.cos(2.0 * Math.PI * ay$2);\r\n    out[2] = s$2 * Math.sin(2.0 * Math.PI * az$2);\r\n    out[3] = s$2 * Math.cos(2.0 * Math.PI * az$2);\r\n    return out;\r\n};\r\nconst rotationTo = (a, b, out) => {\r\n    dotTmp = dot(a, b);\r\n    if (dotTmp < -0.999999) {\r\n        cross(VECTOR3_LEFT, a, tmpVec3);\r\n        if (length(tmpVec3) < 0.000001) {\r\n            cross(VECTOR3_TOP, a, tmpVec3);\r\n        }\r\n        normalize(tmpVec3, tmpVec3);\r\n        fromAxisAngle(tmpVec3, Math.PI, out);\r\n        return out;\r\n    }\r\n    else if (dotTmp > 0.999999) {\r\n        out[0] = 0;\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n        out[3] = 1;\r\n        return out;\r\n    }\r\n    else {\r\n        cross(tmpVec3, a, b);\r\n        out[0] = tmpVec3[0];\r\n        out[1] = tmpVec3[1];\r\n        out[2] = tmpVec3[2];\r\n        out[3] = 1 + dotTmp;\r\n        return normalize$1(out, out);\r\n    }\r\n};\r\nconst rotateX$2 = (a, rad, out) => {\r\n    rad *= 0.5;\r\n    ax$2 = a[0],\r\n        ay$2 = a[1],\r\n        az$2 = a[2],\r\n        aw$1 = a[3];\r\n    bx$2 = Math.sin(rad),\r\n        bw = Math.cos(rad);\r\n    out[0] = ax$2 * bw + aw$1 * bx$2;\r\n    out[1] = ay$2 * bw + az$2 * bx$2;\r\n    out[2] = az$2 * bw - ay$2 * bx$2;\r\n    out[3] = aw$1 * bw - ax$2 * bx$2;\r\n    return out;\r\n};\r\nconst rotateY$2 = (a, rad, out) => {\r\n    rad *= 0.5;\r\n    ax$2 = a[0],\r\n        ay$2 = a[1],\r\n        az$2 = a[2],\r\n        aw$1 = a[3];\r\n    by$2 = Math.sin(rad),\r\n        bw = Math.cos(rad);\r\n    out[0] = ax$2 * bw - az$2 * by$2;\r\n    out[1] = ay$2 * bw + aw$1 * by$2;\r\n    out[2] = az$2 * bw + ax$2 * by$2;\r\n    out[3] = aw$1 * bw - ay$2 * by$2;\r\n    return out;\r\n};\r\nconst rotateZ$2 = (a, rad, out) => {\r\n    rad *= 0.5;\r\n    ax$2 = a[0],\r\n        ay$2 = a[1],\r\n        az$2 = a[2],\r\n        aw$1 = a[3];\r\n    bz$2 = Math.sin(rad),\r\n        bw = Math.cos(rad);\r\n    out[0] = ax$2 * bw + ay$2 * bz$2;\r\n    out[1] = ay$2 * bw - ax$2 * bz$2;\r\n    out[2] = az$2 * bw + aw$1 * bz$2;\r\n    out[3] = aw$1 * bw - az$2 * bz$2;\r\n    return out;\r\n};\r\nconst slerp$1 = (a, b, t, out) => {\r\n    ax$2 = a[0],\r\n        ay$2 = a[1],\r\n        az$2 = a[2],\r\n        aw$1 = a[3];\r\n    bx$2 = b[0],\r\n        by$2 = b[1],\r\n        bz$2 = b[2],\r\n        bw = b[3];\r\n    c$1 = ax$2 * bx$2 + ay$2 * by$2 + az$2 * bz$2 + aw$1 * bw;\r\n    if (c$1 < 0.0) {\r\n        c$1 = -c$1;\r\n        bx$2 = -bx$2;\r\n        by$2 = -by$2;\r\n        bz$2 = -bz$2;\r\n        bw = -bw;\r\n    }\r\n    if (1.0 - c$1 > EPSILON) {\r\n        omega = Math.acos(c$1);\r\n        s$2 = Math.sin(omega);\r\n        scale0 = Math.sin((1.0 - t) * omega) / s$2;\r\n        scale1 = Math.sin(t * omega) / s$2;\r\n    }\r\n    else {\r\n        scale0 = 1.0 - t;\r\n        scale1 = t;\r\n    }\r\n    out[0] = scale0 * ax$2 + scale1 * bx$2;\r\n    out[1] = scale0 * ay$2 + scale1 * by$2;\r\n    out[2] = scale0 * az$2 + scale1 * bz$2;\r\n    out[3] = scale0 * aw$1 + scale1 * bw;\r\n    return out;\r\n};\r\nconst toAxisAngle = (q, outAxis = new Float32Array(3)) => {\r\n    rad = Math.acos(q[3]) * 2.0;\r\n    s$2 = Math.sin(rad / 2.0);\r\n    if (s$2 > EPSILON) {\r\n        outAxis[0] = q[0] / s$2;\r\n        outAxis[1] = q[1] / s$2;\r\n        outAxis[2] = q[2] / s$2;\r\n    }\r\n    else {\r\n        outAxis[0] = 1;\r\n        outAxis[1] = 0;\r\n        outAxis[2] = 0;\r\n    }\r\n    return rad;\r\n};\r\nconst toString$3 = (a) => {\r\n    return `quat(\"${a[0]}, ${a[1]}, ${a[2]}, ${a[3]})`;\r\n};\n\nvar Quaternion = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tangleTo: angleTo,\n\tconjugate: conjugate,\n\tcreate: create$6,\n\tdot: dot$2,\n\tfromAxisAngle: fromAxisAngle,\n\tfromMatrix3: fromMatrix3,\n\tidentity: identity$3,\n\tinvert: invert$3,\n\tlerp: lerp$2,\n\tmultiply: multiply$5,\n\trandom: random,\n\trotationTo: rotationTo,\n\trotateX: rotateX$2,\n\trotateY: rotateY$2,\n\trotateZ: rotateZ$2,\n\tslerp: slerp$1,\n\ttoAxisAngle: toAxisAngle,\n\ttoString: toString$3\n});\n\nvar rndFloat = (low, high) => {\r\n    return low + Math.random() * (high - low);\r\n};\n\nvar rndFloatRange = (range) => {\r\n    return range * (0.5 - Math.random());\r\n};\n\nvar rndInt = (low, high) => {\r\n    return low + Math.floor(Math.random() * (high - low + 1));\r\n};\n\nlet x$3 = 0, y$3 = 0, c$2 = 0, s$3 = 0;\r\nconst add$3 = (a, b, out = new Float32Array(2)) => {\r\n    out[0] = a[0] + b[0];\r\n    out[1] = a[1] + b[1];\r\n    return out;\r\n};\r\nconst addScalar$1 = (a, b, out = new Float32Array(2)) => {\r\n    out[0] = a[0] + b;\r\n    out[1] = a[1] + b;\r\n    return out;\r\n};\r\nconst angle$1 = (a) => {\r\n    return Math.atan2(a[1], a[0]);\r\n};\r\nconst ceil$1 = (a, out = new Float32Array(2)) => {\r\n    out[0] = Math.ceil(a[0]);\r\n    out[1] = Math.ceil(a[1]);\r\n    return out;\r\n};\r\nconst clamp$1 = (a, min, max, out = new Float32Array(2)) => {\r\n    out[0] = clampCommon(a[0], min[0], max[0]);\r\n    out[1] = clampCommon(a[1], min[1], max[1]);\r\n    return out;\r\n};\r\nconst clampSafe$1 = (a, min, max, out = new Float32Array(2)) => {\r\n    out[0] = clampSafeCommon(a[0], min[0], max[0]);\r\n    out[1] = clampSafeCommon(a[1], min[1], max[1]);\r\n    return out;\r\n};\r\nconst clampLength = (a, min, max, out = new Float32Array(2)) => {\r\n    out[0] = clampSafeCommon(a[0], min[0], max[0]);\r\n    out[1] = clampSafeCommon(a[1], min[1], max[1]);\r\n    return out;\r\n};\r\nconst clampScalar$1 = (a, min, max, out = new Float32Array(2)) => {\r\n    out[0] = clampCommon(a[0], min, max);\r\n    out[1] = clampCommon(a[1], min, max);\r\n    return out;\r\n};\r\nconst closeTo$3 = (a, b, epsilon = EPSILON) => {\r\n    return distanceTo$2(a, b) <= epsilon;\r\n};\r\nconst closeToRect = (a, b, epsilon = EPSILON) => {\r\n    return closeToCommon(a[0], b[0], epsilon) && closeToCommon(a[1], b[1], epsilon);\r\n};\r\nconst closeToManhattan = (a, b, epsilon = EPSILON) => {\r\n    return distanceToManhattan$1(a, b) <= epsilon;\r\n};\r\nconst clone$1 = (a, out = new Float32Array(2)) => {\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    return out;\r\n};\r\nconst cross$2 = (a, b) => {\r\n    return a[0] * b[1] - a[1] * b[0];\r\n};\r\nconst create$7 = (x, y, out = new Float32Array(2)) => {\r\n    out[0] = x;\r\n    out[1] = y;\r\n    return out;\r\n};\r\nconst distanceTo$2 = (a, b) => {\r\n    x$3 = b[0] - a[0];\r\n    y$3 = b[1] - a[1];\r\n    return Math.hypot(x$3, y$3);\r\n};\r\nconst distanceToManhattan$1 = (a, b) => {\r\n    return Math.abs(a[0] - b[0]) + Math.abs(a[1] - b[1]);\r\n};\r\nconst distanceToSquared$2 = (a, b) => {\r\n    x$3 = a[0] - b[0];\r\n    y$3 = a[1] - b[1];\r\n    return x$3 * x$3 + y$3 * y$3;\r\n};\r\nconst divide$2 = (a, b, out = new Float32Array(2)) => {\r\n    out[0] = a[0] / b[0];\r\n    out[1] = a[1] / b[1];\r\n    return out;\r\n};\r\nconst divideScalar$1 = (a, scalar, out = new Float32Array(2)) => {\r\n    return multiplyScalar$3(a, 1 / scalar, out);\r\n};\r\nconst dot$3 = (a, b) => {\r\n    return a[0] * b[0] + a[1] * b[1];\r\n};\r\nconst equals$3 = (a, b) => {\r\n    return a[0] === b[0] && a[1] === b[1];\r\n};\r\nconst floor$1 = (a, out = new Float32Array(2)) => {\r\n    out[0] = Math.floor(a[0]);\r\n    out[1] = Math.floor(a[1]);\r\n    return out;\r\n};\r\nconst floorToZero = (a, out = new Float32Array(2)) => {\r\n    out[0] = floorToZeroCommon(a[0]);\r\n    out[1] = floorToZeroCommon(a[1]);\r\n    return out;\r\n};\r\nconst from$5 = (a, out = new Float32Array(2)) => {\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    return out;\r\n};\r\nconst fromArray$1 = (arr, index = 0, out = new Float32Array(2)) => {\r\n    out[0] = arr[index];\r\n    out[1] = arr[index + 1];\r\n    return out;\r\n};\r\nconst fromJson = (j, out = new Float32Array(2)) => {\r\n    out[0] = j.x;\r\n    out[1] = j.y;\r\n    return out;\r\n};\r\nconst fromPolar = (p, out = new Float32Array(2)) => {\r\n    out[0] = Math.cos(p.a) * p.r;\r\n    out[1] = Math.sin(p.a) * p.r;\r\n    return out;\r\n};\r\nconst fromScalar$2 = (value = 0, out = new Float32Array(2)) => {\r\n    out[0] = out[1] = value;\r\n    return out;\r\n};\r\nconst inverse$2 = (a, out = new Float32Array(2)) => {\r\n    out[0] = 1 / a[0] || 0;\r\n    out[1] = 1 / a[1] || 0;\r\n    return out;\r\n};\r\nconst length$2 = (a) => {\r\n    return Math.sqrt(a[0] * a[0] + a[1] * a[1]);\r\n};\r\nconst lengthManhattan$1 = (a) => {\r\n    return Math.abs(a[0]) + Math.abs(a[1]);\r\n};\r\nconst lengthSquared$2 = (a) => {\r\n    return a[0] * a[0] + a[1] * a[1];\r\n};\r\nconst lerp$3 = (a, b, alpha, out = new Float32Array(2)) => {\r\n    out[0] = (b[0] - a[0]) * alpha + a[0];\r\n    out[1] = (b[1] - a[1]) * alpha + a[1];\r\n    return out;\r\n};\r\nconst max$2 = (a, b, out = new Float32Array(2)) => {\r\n    out[0] = Math.max(a[0], b[0]);\r\n    out[1] = Math.max(a[1], b[1]);\r\n    return out;\r\n};\r\nconst min$2 = (a, b, out = new Float32Array(2)) => {\r\n    out[0] = Math.min(a[0], b[0]);\r\n    out[1] = Math.min(a[1], b[1]);\r\n    return out;\r\n};\r\nconst minus$3 = (a, b, out = new Float32Array(2)) => {\r\n    out[0] = a[0] - b[0];\r\n    out[1] = a[1] - b[0];\r\n    return out;\r\n};\r\nconst minusScalar$1 = (a, num, out = new Float32Array(2)) => {\r\n    out[0] = a[0] - num;\r\n    out[1] = a[1] - num;\r\n    return out;\r\n};\r\nconst multiply$6 = (a, b, out = new Float32Array(2)) => {\r\n    out[0] = a[0] * b[0];\r\n    out[1] = a[1] * b[1];\r\n    return out;\r\n};\r\nconst multiplyScalar$3 = (a, scalar, out = new Float32Array(2)) => {\r\n    out[0] = a[0] * scalar;\r\n    out[1] = a[1] * scalar;\r\n    return out;\r\n};\r\nconst negate$2 = (a, out = new Float32Array(2)) => {\r\n    out[0] = -a[0];\r\n    out[1] = -a[1];\r\n    return out;\r\n};\r\nconst normalize$2 = (a, out = new Float32Array(2)) => {\r\n    return divideScalar$1(a, length$2(a) || 1, out);\r\n};\r\nconst random$1 = (length = 1, out = new Float32Array(2)) => {\r\n    x$3 = Math.random() * DEG_360_RAD;\r\n    out[0] = Math.cos(x$3) * length;\r\n    out[1] = Math.sin(x$3) * length;\r\n    return out;\r\n};\r\nconst rotate$3 = (a, angle, center = VECTOR2_ZERO, out = new Float32Array(2)) => {\r\n    c$2 = Math.cos(angle);\r\n    s$3 = Math.sin(angle);\r\n    x$3 = a[0] - center[0];\r\n    y$3 = a[1] - center[1];\r\n    out[0] = x$3 * c$2 - y$3 * s$3 + center[0];\r\n    out[1] = x$3 * s$3 + y$3 * c$2 + center[1];\r\n    return out;\r\n};\r\nconst round$2 = (a, out = new Float32Array(2)) => {\r\n    out[0] = Math.round(a[0]);\r\n    out[1] = Math.round(a[1]);\r\n    return out;\r\n};\r\nconst set$1 = (x = 0, y = 0, out = new Float32Array(2)) => {\r\n    out[0] = x;\r\n    out[1] = y;\r\n    return out;\r\n};\r\nconst setLength$1 = (a, length, out = new Float32Array(2)) => {\r\n    normalize$2(a, out);\r\n    multiplyScalar$3(out, length, out);\r\n    return out;\r\n};\r\nconst toArray = (a, arr = []) => {\r\n    arr[0] = a[0];\r\n    arr[1] = a[1];\r\n    return arr;\r\n};\r\nconst toPalorJson = (a, p = { a: 0, r: 0 }) => {\r\n    p.r = length$2(a);\r\n    p.a = angle$1(a);\r\n    return p;\r\n};\r\nconst toString$4 = (a) => {\r\n    return `vec2(${a[0]}, ${a[1]})`;\r\n};\r\nconst transformMatrix3$1 = (a, m, out) => {\r\n    x$3 = a[0];\r\n    y$3 = a[1];\r\n    out[0] = m[0] * x$3 + m[3] * y$3 + m[6];\r\n    out[1] = m[1] * x$3 + m[4] * y$3 + m[7];\r\n    return out;\r\n};\r\nconst VECTOR2_ZERO = new Float32Array([0, 0]);\r\nconst VECTOR2_TOP = new Float32Array([0, 1]);\r\nconst VECTOR2_BOTTOM = new Float32Array([0, -1]);\r\nconst VECTOR2_LEFT = new Float32Array([-1, 0]);\r\nconst VECTOR2_RIGHT = new Float32Array([1, 0]);\n\nvar Vector2 = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tadd: add$3,\n\taddScalar: addScalar$1,\n\tangle: angle$1,\n\tceil: ceil$1,\n\tclamp: clamp$1,\n\tclampSafe: clampSafe$1,\n\tclampLength: clampLength,\n\tclampScalar: clampScalar$1,\n\tcloseTo: closeTo$3,\n\tcloseToRect: closeToRect,\n\tcloseToManhattan: closeToManhattan,\n\tclone: clone$1,\n\tcross: cross$2,\n\tcreate: create$7,\n\tdistanceTo: distanceTo$2,\n\tdistanceToManhattan: distanceToManhattan$1,\n\tdistanceToSquared: distanceToSquared$2,\n\tdivide: divide$2,\n\tdivideScalar: divideScalar$1,\n\tdot: dot$3,\n\tequals: equals$3,\n\tfloor: floor$1,\n\tfloorToZero: floorToZero,\n\tfrom: from$5,\n\tfromArray: fromArray$1,\n\tfromJson: fromJson,\n\tfromPolar: fromPolar,\n\tfromScalar: fromScalar$2,\n\tinverse: inverse$2,\n\tlength: length$2,\n\tlengthManhattan: lengthManhattan$1,\n\tlengthSquared: lengthSquared$2,\n\tlerp: lerp$3,\n\tmax: max$2,\n\tmin: min$2,\n\tminus: minus$3,\n\tminusScalar: minusScalar$1,\n\tmultiply: multiply$6,\n\tmultiplyScalar: multiplyScalar$3,\n\tnegate: negate$2,\n\tnormalize: normalize$2,\n\trandom: random$1,\n\trotate: rotate$3,\n\tround: round$2,\n\tset: set$1,\n\tsetLength: setLength$1,\n\ttoArray: toArray,\n\ttoPalorJson: toPalorJson,\n\ttoString: toString$4,\n\ttransformMatrix3: transformMatrix3$1,\n\tVECTOR2_ZERO: VECTOR2_ZERO,\n\tVECTOR2_TOP: VECTOR2_TOP,\n\tVECTOR2_BOTTOM: VECTOR2_BOTTOM,\n\tVECTOR2_LEFT: VECTOR2_LEFT,\n\tVECTOR2_RIGHT: VECTOR2_RIGHT\n});\n\nexport { COLOR_HEX_MAP, ColorGPU, ColorRGB, ColorRGBA, Matrix2, Matrix3, Matrix4, Quaternion, Vector2, Vector3, Vector4, ceilPowerOfTwo, clampCommon as clamp, clampCircle, clampSafeCommon as clampSafe, closeToCommon as closeTo, floorPowerOfTwo, floorToZeroCommon as floorToZero, isPowerOfTwo, randFloat, randInt, rndFloat, rndFloatRange, rndInt, sum$1 as sum, sumArray };\n//# sourceMappingURL=Mathx.module.js.map\n","/**\r\n * @class\r\n * @classdesc 数字id生成器，用于生成递增id\r\n * @param {number} [initValue = 0] 从几开始生成递增id\r\n */\r\nclass IdGenerator {\r\n    constructor(initValue = 0) {\r\n        this.value = this.initValue = initValue;\r\n    }\r\n    current() {\r\n        return this.value;\r\n    }\r\n    next() {\r\n        return ++this.value;\r\n    }\r\n    skip(value = 1) {\r\n        if (value < 1) {\r\n            value = 1;\r\n        }\r\n        this.value += value;\r\n        return ++this.value;\r\n    }\r\n}\n\nexport default IdGenerator;\n"],"names":["EulerRotationOrders","a03","a13","a23","a31","a30","a32","a33","b03","z","a","b","c","d","e","f","UNIT_MATRIX4_DATA","fromEuler"],"mappings":"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"}